Setting up Zeppelin to Run with CCPCloudera Docs
Setting up Zeppelin to Run
      with CCP
You can import the Zeppelin Notebook using Ambari or manually. To complete your set up
      you'll need to use Zeppelin interpretors and load the telemetry information.
Setting up Zeppelin is very simple. To access Zeppelin, go to
                  http://$ZEPPELIN_HOST:9995.
 In addition to this documentation, there are three other sources for Zeppelin information. 


The Zeppelin installation for CCP provides a couple sample notes including
                     tutorials specific to CCP. These notes are listed on the left side of the
                     Welcome screen and in the Notebook menu.
Hortonworks Zeppelin documentation provides information on launching and using
                     Zeppelin.
Apache Zeppelin documentation provides information on Zeppelin basic features,
                     supported interpreters, and more.


Using Zeppelin InterpretersWhen you install       Zeppelin on CCP the installation includes the interpreter for Spark. Spark is the main backend       processing engine for Zeppelin. Spark is also a front end for Python, Scala, and SQL and you       can use any of these languages to analyze the telemetry data.Loading Telemetry Information into ZeppelinBefore you can analyze telemetry information in Zeppelin, you must first download it     from Metron. Metron archives the fully parsed, enriched, and triaged telemetry for each sensor     in HDFS. This archived telemetry information is simply raw JSON files which makes it simple to     parse and analyze the information with Zeppelin. Working with ZeppelinThe Zeppelin user interface consists of notes that are divided into paragraphs. Each     paragraph consists of two sections: the code section where you put your source code and the     result section where you can see the result of the code execution. When you use the Spark     interpreter, you can enter source code in Python, Scala, or SQL. When you run the code from the     browser, Zeppelin sends the code to a backend processor such as Spark. The processor or service     then returns results; you can then use Zeppelin to review and visualize results in the browser. Parent topic: Creating Runbooks Using Apache Zeppelin