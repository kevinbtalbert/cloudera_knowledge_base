Tuning a Random Access Indexing TopologyCloudera Docs
Tuning a Random Access
        Indexing Topology
Indexing is primarily IO driven. Tuning indexing tends to focus on the search index
        (Solr or Elasticsearch). Problems with indexing running too slow will often manifest as
        Kafka not committing in time. This results from the indexing backing up so that it fails
        batches and the poll interval in Kafka is exceeded. The issue is actually with the index
        rather than Kafka.
Test Random Access Indexing Topology SettingsWhile the parameters for the Indexing topology should be modified via Ambari for       persistence, there is a method by which the topologies can be started via the command line on       the Metron node and parameters easily modified for testing. The commands below demonstrate how       to create a copy of the Metron files for making changes quickly during testing.Tune Random Access Indexing Kafka PartitionsIf the number of Kafka partitions was correctly calculated for the Indexing topic,       then no modifications should be required to the Kafka topic.Tune Random Access Indexing Elasticsearch TemplatesBefore tuning the Elasticsearch indexing topology, the Elasticsearch templates for the       appropriate sensors should be created and uploaded to Elasticsearch. Tune Random Access Indexing Core Storm SettingsYou can set the number of Kafka spouts to match the number of Kafka partitions. You       can also increase the number of workers and ackers to match the Storm nodes, unless the       estimated throughput for the parser is very low.Tune Additional Random Access Indexing Storm SettingsAfter the number of executors has been determined and thoroughly tested, you can set       or modify the last remaining Storm parameters.