Configuring Flink applicationsCloudera Docs
Configuring Flink applications
Cloudera Streaming Analytics includes Flink with configuration that works out of the
  box. It is not mandatory to configure Flink to production, but you can use the available
  configurations to optimize the application behavior in production. Cloudera Manager includes all
  the necessary configurations for Flink that can also be accessed from the flink-conf.yaml
  file.
Setting parallelism and max parallelismThe max parallelism is the most essential part of resource configuration for Flink   applications as it defines the maximum jobs that are executed at the same time in parallel   instances. However, you can optimize max parallelism in case your production goals differ from the   default settings.Configuring Flink application resourcesGenerally, Flink automatically identifies the required resources for an application   based on the parallelism settings. However, you can adjust the configurations based on your   requirements by specifying the number of task managers and their memory allocation for individual   Flink applications or for the entire Flink deployment.Configuring RocksDB state backendYou can use RocksDB as a state backend when your Flink streaming application requires a         larger state that doesnâ€™t fit easily in memory. The RocksDB state backend uses a combination         of fast in-memory cache and optimized disk based lookups to manage state.Enabling checkpoints for Flink applicationsTo make your Flink application fault tolerant, you need to enable automatic     checkpointing. When an error or a failure occurs, Flink will automatically restarts and restores     the state from the last successful checkpoint. Checkpointing is not enabled by     default.Parent topic: Application development