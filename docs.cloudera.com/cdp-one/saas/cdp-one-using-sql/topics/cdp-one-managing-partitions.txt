Partitioned tablesCloudera Docs
Partitioned tables
Partitioning organizes table data and can improve query performance of low volume data.
  You can query slices of the data instead of scanning the entire table.  
You should avoid creating many small partitions. You can partition managed and external tables.
   You use the PARTITIONED BY clause to create a partitioned table and follow step-by-step
   instructions to insert data into the partitions. You can put files, such as CSV
   (comma-separated-values) files, that contain the data in directories that represent partitions
   and create external tables based on the CSV data.
Under certain conditions, you must manually repair metadata about Hive or Impala partitions
   that resides in the metastore to keep changes to partitions in sync with the metadata. You learn
   when and how to do this.

Creating and loading a managed, partitioned tableYou use the PARTITIONED BY clause to create a partitioned table. To insert data into         particular partitions in the table, you use a familiar ANSI SQL statement that indentifies         the data for each partition. A simple example shows you have to accomplish this basic task.  Creating an Impala external partitioned tableYou specify a partition column using PARTITIONED BY clause when you create an Impala         table. The actual data for the table can reside in a file, for example a CSV         (comma-separated values) in the object store. Alternatively, the data for the external table         can reside in another table that you select in a subquery.Creating a Hive external partitioned tableYou can configure Hive to create partitions dynamically and then run a query that         creates the related directories on the object store. Hive also separates the data into the         directories. Repairing Hive or Impala partitionsUnder certain conditions, you must manually repair metadata about Hive or Impala         partitions. You learn when and how to do this.