Introduction to HBase Multi-cluster ClientCloudera Docs
Introduction to HBase Multi-cluster Client
Learn about the HBase Multi-cluster Client (MCC) and ways to switch between the single
    HBase clusters and Multi-HBase clients. Explore HBase MCC usage with Kerberos with examples.
    Implement your HBase clients in Spark using Scala or Java.
Cloudera Operational Database (COD) supports HBase MCC that ensures high availability and
      better performance. HBase MCC relies on the existing HBase replication functionality to
      provide an eventually consistent solution in cases of primary cluster downtime.
HBase MCC offers the following benefits:
Switch between single HBase clusters and Multi-HBase Client with limited code
          changes.
Support multiple number of linked HBase clusters.
Continue to keep applications running without disrupting a cluster during an upgrade or
          outage.




Figure 1. HBase MCC architecture






HBase MCC Usage with KerberosYou can configure HBase MCC with Kerberos authentication for enhanced security and   better performance.HBase MCC Usage in Spark with ScalaThe Spark implementation does not support multiple keytabs. You must configure and   enable the cross-realm kerberos for Spark to operate properly.HBase MCC Usage in Spark with JavaZookeeper ConfigurationsHBase MCC uses the zookeeper.recovery.retry parameter to monitor   the number of retries when Zookeeper is down.HBase MCC ConfigurationsHBase Multi-cluster Client (MCC) provides various configuration parameters to set up   clusters, mode, and different connection related properties.HBase MCC RestrictionsHBase MCC contains a few restrictions when you are executing it in Spark compared to   executing it in a standard Java application.