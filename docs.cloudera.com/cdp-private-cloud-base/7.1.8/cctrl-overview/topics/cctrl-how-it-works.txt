Kafka cluster load balancing using Cruise ControlCloudera Docs
Kafka cluster load balancing using Cruise Control
You can use Cruise Control as a load balancing component in large Kafka installations to
    automatically balance the partitions based on specific conditions for your deployment. The
    elements in the Cruise Control architecture are responsible for different parts of the
    rebalancing process that uses Kafka metrics and optimization goals.
The following illustration shows the architecture of Cruise Control.

noteBased on the configuration of the Metrics Reporter, either Cloudera Manager or the
        default Metrics Reporter in Kafka can be used.
Load Monitor
Generates a cluster workload model based on standard Kafka metrics and resource metrics to
        utilize disk, CPU, bytes-in rate, and bytes-out rate. Feeds the cluster model into Anomaly
        Detector and Analyzer.

Analyzer
Generates optimization proposals based on optimization goals provided by the user, and cluster
    workload model from Load Monitor. Hard goals and soft goals can be set. Hard goals must be
    fulfilled, while soft goals can be left unfulfilled if hard goals are reached. The optimization
    fails if the hard goal is violated by optimization results.

Anomaly Detector
Responsible for detecting anomalies that can happen during the rebalancing process. The
        following anomaly detections are supported in Cruise Control:
Broker failure
Goal violations
Disk failure
Slow broker as Metric Anomaly
Topic replication factor
The detected anomalies can be resolved by the self-healing feature of Cruise Control.
        For more information, see the How Cruise Control self-healing works
        documentation.

Executor
Carries out the optimization proposals and it can be safely interrupted when executing
    proposals. The executions are always resource-aware processes.


Related informationHow Cruise Control self-healing works