HBase read replicasCloudera Docs
HBase read replicas
You can configure read replicas to enable the HMaster to distribute read-only copies of
  regions (replicas) to different RegionServers in the cluster.
Without read replicas, only one RegionServer services a read request from a client, regardless
   of whether RegionServers are colocated with other DataNodes that have local access to the same
   block. This ensures consistency of the data being read. However, a RegionServer can become a
   bottleneck due to an underperforming RegionServer, network problems, or other reasons that could
   cause slow reads. With read replicas enabled, the HMaster distributes read-only copies of regions
   (replicas) to different RegionServers in the cluster. One RegionServer services the default or
   primary replica, which is the only replica which can service write requests. If the RegionServer
   servicing the primary replica is down, writes will fail. Other RegionServers serve the secondary
   replicas, follow the primary RegionServer and only see committed updates. The secondary replicas
   are read-only, and are unable to service write requests. 
The secondary replicas can be kept up to date by reading the primary replica's HFiles at a set
   interval or by replication. If they use the first approach, the secondary replicas may not
   reflect the most recent updates to the data when updates are made and the RegionServer has not
   yet flushed the memstore to HDFS. If the client receives the read response from a secondary
   replica, this is indicated by marking the read as "stale". Clients can detect whether or not the
   read result is stale and react accordingly. Replicas are placed on different RegionServers, and
   on different racks when possible. This provides a measure of high availability (HA), as far as
   reads are concerned. 
If a RegionServer becomes unavailable, the regions it was serving can still be accessed by
   clients even before the region is taken over by a different RegionServer, using one of the
   secondary replicas. The reads may be stale until the entire WAL is processed by the new
   RegionServer for a given region. For any given read request, a client can request a faster result
   even if it comes from a secondary replica, or if consistency is more important than speed, it can
   ensure that its request is serviced by the primary RegionServer. This allows you to decide the
   relative importance of consistency and availability, in terms of the CAP Theorem, in the context
   of your application, or individual aspects of your application, using Timeline Consistency
   semantics. 

