User-defined functions (UDFs)Cloudera Docs
User-defined functions (UDFs)
User-defined functions (frequently abbreviated as UDFs) let you code your own
    application logic for processing column values during an Impala query. For example, a UDF could
    perform calculations using an external math library, combine several column values into one, do
    geospatial calculations, or other kinds of tests and transformations that are outside the scope
    of the built-in SQL operators and functions.
      You can use UDFs to simplify query logic when producing reports, or to transform data in
      flexible ways when copying from one table to another with the INSERT ...
      SELECT syntax.
     You might be familiar with this feature from other database products, under
        names such as stored functions or stored routines.  
      Impala support for UDFs is available in Impala 1.2 and higher:
    

        In Impala 1.1, using UDFs in a query required using the Hive shell. (Because Impala and
        Hive share the same metastore database, you could switch to Hive to run just those
        queries requiring UDFs, then switch back to Impala.)
      

        Starting in Impala 1.2, Impala can run both high-performance native code UDFs written in
        C++, and Java-based Hive UDFs that you might already have written.
      

        Impala can run scalar UDFs that return a single value for each row of the result set,
        and user-defined aggregate functions (UDAFs) that return a value based on a set of rows.
        Currently, Impala does not support user-defined table functions (UDTFs) or window
        functions.
      


Related informationSample UDF and UDAs for ImpalaMemoizationUDF conceptsRuntime environment for UDFsInstalling the UDF development packageWriting UDFsWriting user-defined aggregate functions (UDAFs)Building and deploying UDFsPerformance considerations for UDFsExamples of creating and using UDFsSecurity considerations for UDFsLimitations and restrictions for Impala UDFsUDF conceptsDepending on your use case, you might write all-new functions, reuse Java UDFs that you         have already written for Hive, or port Hive Java UDF code to higher-performance native         Impala UDFs in C++. You can code either scalar functions for producing results one row at a         time, or more complex aggregate functions for doing analysis across. The following sections         discuss these different aspects of working with UDFs.Runtime environment for UDFsBy default, Impala copies UDFs into /tmp, and you can configure this         location through the --local_library_dir startup flag for the           impalad daemon.Installing the UDF development package To develop UDFs for Impala, download and install the           impala-udf-devel package (RHEL-based distributions).         This package contains header files, sample source, and build         configuration files.Writing UDFsBefore starting UDF development, make sure to install the development package and download         the UDF code samples. Install the Impala UDF development package as described in Installing the UDF development package.Writing user-defined aggregate functions (UDAFs)User-defined aggregate functions (UDAFs or UDAs) are a powerful and flexible category of         user-defined functions. If a query processes N rows, calling a UDAF during the query         condenses the result set, anywhere from a single value (such as with the           SUM or MAX functions), or some number less than or equal         to N (as in queries using the GROUP BY or HAVING clause).Building and deploying UDFsThis section explains the steps to compile Impala UDFs from C++ source code, and deploy         the resulting libraries for use in Impala queries.Performance considerations for UDFsBecause a UDF typically processes each row of a table, potentially being called billions         of times, the performance of each UDF is a critical factor in the speed of the overall ETL         or ELT pipeline. Tiny optimizations you can make within the function body can pay off in a         big way when the function is called over and over when processing a huge result set.Examples of creating and using UDFsThis section demonstrates how to create and use all kinds of         user-defined functions (UDFs).Security considerations for UDFsWhen the Impala authorization feature is enabled:Limitations and restrictions for Impala UDFsThe following limitations and restrictions apply to Impala UDFs in the current release.