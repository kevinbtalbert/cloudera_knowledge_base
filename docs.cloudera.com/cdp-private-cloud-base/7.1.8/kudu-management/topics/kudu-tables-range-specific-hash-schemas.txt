Managing Kudu tables with range-specific hash schemasCloudera Docs
Managing Kudu tables with range-specific hash schemas
The custom hash partition feature enables you to vary the number of hash buckets per
  range partition, both at table creation and alteration time. 
It is possible to specify a different number of hash buckets per range partition when
   creating or altering a table. This allows for accommodating new ranges of already existing Kudu
   tables to changes in workload patterns. For example, for a table range-partitioned by date or
   timestamp it makes sense to increase the number of hash buckets with an increase in ingestion
   rate to maximize write throughput. 
When no hash schema per range is specified for a tableâ€™s range either during creation
   or alteration time, it defaults to the table-wide hash schema. If no table-wide hash schema is
   specified when the table is created, no hash bucketing for the data is done at all.
Any hash schema specified for a range partition overrides the table-wide hash schema.
   However, the number of hash dimensions in any range-specific hash schema must be the same as in
   the table-wide hash schema. 
The newly introduced range-specific hash schemas in Kudu are supported by
   impala-shell. 

Range-specific hash schemas example: Using impala-shellReview examples of using impala-shell to create and alter Kudu tables with     range-specific hash schemas.Range-specific hash schemas example: Using Kudu C++ client APIReview an example of using Kudu C++ client API to create a table with a range partition     having range-specific hash schema and then alter the table, adding one more range with custom     hash schema. Range-specific hash schemas example: Using Kudu Java client APIReview an example of using Kudu Java client API to create a table with a range partition   having range-specific hash schema and then alter the table, adding one more range with custom hash   schema. 