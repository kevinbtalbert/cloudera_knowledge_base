Example use casesCloudera Docs
Example use cases
Kudu gives you capability to stream inputs with near real-time availability. You can
    run time-series applications with varying access patterns, and develop predective learning
    models. Kudu gives you freedom to access and query data from any legacy sources or formats using
    Impala.
Streaming Input with Near Real Time Availability

          A common business challenge is one where new data arrives rapidly and constantly, and
          the same data needs to be available in near real time for reads, scans, and updates.
          Kudu offers the powerful combination of fast inserts and updates with efficient
          columnar scans to enable real-time analytics use cases on a single storage layer.
        

Time-Series Application with Widely Varying Access Patterns

          A time-series schema is one in which data points are organized and keyed according to
          the time at which they occurred. This can be useful for investigating the performance
          of metrics over time or attempting to predict future behavior based on past data. For
          instance, time-series customer data might be used both to store purchase click-stream
          history and to predict future purchases, or for use by a customer support
          representative. While these different types of analysis are occurring, inserts and
          mutations might also be occurring individually and in bulk, and become available
          immediately to read workloads. Kudu can handle all of these access patterns
          simultaneously in a scalable and efficient manner.
        

          Kudu is a good fit for time-series workloads for several reasons. With Kudu's support
          for hash-based partitioning, combined with its native support for compound row keys,
          it is simple to set up a table spread across many servers without the risk of
          "hotspotting" that is commonly observed when range partitioning is used. Kudu's
          columnar storage engine is also beneficial in this context, because many time-series
          workloads read only a few columns, as opposed to the whole row.
        

          In the past, you might have needed to use multiple datastores to handle different data
          access patterns. This practice adds complexity to your application and operations, and
          duplicates your data, doubling (or worse) the amount of storage required. Kudu can
          handle all of these access patterns natively and efficiently, without the need to
          off-load work to other datastores.
        

Predictive Modeling

          Data scientists often develop predictive learning models from large sets of data. The
          model and the data might need to be updated or modified often as the learning takes
          place or as the situation being modeled changes. In addition, the scientist might want
          to change one or more factors in the model to see what happens over time. Updating a
          large set of data stored in files in HDFS is resource-intensive, as each file needs to
          be completely rewritten. In Kudu, updates happen in near real time. The scientist can
          tweak the value, re-run the query, and refresh the graph in seconds or minutes, rather
          than hours or days. In addition, batch or incremental algorithms can be run across the
          data at any time, with near-real-time results.
        

Combining Data In Kudu With Legacy Systems

          Companies generate data from multiple sources and store it in a variety of systems and
          formats. For instance, some of your data might be stored in Kudu, some in a
          traditional RDBMS, and some in files in HDFS. You can access and query all of these
          sources and formats using Impala, without the need to change your legacy systems.
        


