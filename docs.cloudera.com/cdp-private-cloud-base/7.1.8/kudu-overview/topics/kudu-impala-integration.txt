Kudu-Impala integrationCloudera Docs
Kudu-Impala integration
Apache Kudu has tight integration with Apache Impala, allowing you to use Impala to
      insert, query, update, and delete data from Kudu tablets using Impala's SQL syntax, as an
      alternative to using the Kudu APIs to build a custom Kudu application. In addition, you can
      use JDBC or ODBC to connect existing or new applications written in any language, framework,
      or business intelligence tool to your Kudu data, using Impala as the broker.



CREATE/ALTER/DROP TABLE
 - Impala supports creating, altering, and dropping tables using Kudu as the
            persistence layer. The tables follow the same internal/external approach as other tables
            in Impala, allowing for flexible data ingestion and querying. 


INSERT
 - Data can be inserted into Kudu tables from Impala using the same mechanisms as
            any other table with HDFS or HBase persistence. 


UPDATE/DELETE
 - Impala supports the UPDATE and
               DELETE SQL commands to modify
            existing data in a Kudu table row-by-row or as a batch. The syntax of the SQL commands
            is designed to be as compatible as possible with existing solutions. In addition to
            simple DELETE or UPDATE commands, you can specify complex
            joins in the FROM clause of the query,
            using the same syntax as a regular SELECT statement. 

Flexible Partitioning - Similar to partitioning of
            tables in Hive, Kudu allows you to dynamically pre-split tables by hash or range into a
            predefined number of tablets, in order to distribute writes and queries evenly across
            your cluster. You can partition by any number of primary key columns, with any number of
            hashes, a list of split rows, or a combination of these. A partition scheme is required. 

Parallel Scan - To achieve the highest possible
            performance on modern hardware, the Kudu client used by Impala parallelizes scans across
            multiple tablets. 

High-efficiency queries - Where possible, Impala
            pushes down predicate evaluation to Kudu, so that predicates are evaluated as close as
            possible to the data. Query performance is comparable to Parquet in many workloads.
         


