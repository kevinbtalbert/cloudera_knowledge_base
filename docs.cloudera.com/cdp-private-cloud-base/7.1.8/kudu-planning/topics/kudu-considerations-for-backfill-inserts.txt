Considerations for backfill insertsCloudera Docs
Considerations for backfill inserts
This section discuss a primary key design consideration for timeseries use cases where
    the primary key is a timestamp, or the first column of the primary key is a
    timestamp.

          Each time a row is inserted into a Kudu table, Kudu looks up the primary key in the
          primary key index storage to check whether that primary key is already present in the
          table. If the primary key exists in the table, a "duplicate key" error is returned. In
          the typical case where data is being inserted at the current time as it arrives from
          the data source, only a small range of primary keys are "hot". So, each of these
          "check for presence" operations is very fast. It finds the cached primary key storage
          in memory and doesnâ€™t require going to disk.
        

          In the case when you load historical data, which is called "backfilling", from an
          offline data source, each row that is inserted is likely to reach a cold area of the
          primary key index which is not resident in memory and will cause one or more HDD disk
          seeks. For example, in a normal ingestion case where Kudu sustains a few million
          inserts per second, the "backfill" use case might sustain only a few thousand inserts
          per second.
        

          To alleviate the performance issue during backfilling, consider the following options:
        


            Make the primary keys more compressible.
            
              For example, with the first column of a primary key being a random ID of 32-bytes,
              caching one billion primary keys would require at least 32 GB of RAM to stay in
              cache. If caching backfill primary keys from several days ago, you need to have
              several times 32 GB of memory. By changing the primary key to be more
              compressible, you increase the likelihood that the primary keys can fit in cache
              and thus reducing the amount of random disk I/Os.
            


            Use SSDs for storage as random seeks are orders of magnitude faster than spinning
            disks.
          

            Change the primary key structure such that the backfill writes find a continuous
            range of primary keys.
          


Parent topic: Primary key design