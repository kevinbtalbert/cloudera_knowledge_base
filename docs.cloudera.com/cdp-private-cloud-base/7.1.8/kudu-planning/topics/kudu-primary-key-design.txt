Primary key designCloudera Docs
Primary key design
Every Kudu table must declare a primary key comprised of one or more columns. Like an
    RDBMS primary key, the Kudu primary key enforces a uniqueness constraint. Attempting to insert a
    row with the same primary key values as an existing row will result in a duplicate key
    error.
 Primary
      key columns must be non-nullable, and may not be a boolean or floating-point type. 

        Once set during table creation, the set of columns in the primary key may not be
        altered.
      

        Unlike an RDBMS, Kudu does not provide an auto-incrementing column feature, so the
        application must always provide the full primary key during insert.
      

        Row delete and update operations must also specify the full primary key of the row to be
        changed. Kudu does not natively support range deletes or updates.
      

        The primary key values of a column may not be updated after the row is inserted.
        However, the row may be deleted and re-inserted with the updated value.
      

Primary key indexAs with many traditional relational databases, Kuduâ€™s primary key is in a clustered     index. All rows within a tablet are sorted by its primary key. Considerations for backfill insertsThis section discuss a primary key design consideration for timeseries use cases where     the primary key is a timestamp, or the first column of the primary key is a     timestamp.Parent topic: Kudu schema design