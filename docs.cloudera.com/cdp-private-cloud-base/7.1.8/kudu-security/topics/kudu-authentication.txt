Kudu authenticationCloudera Docs
Kudu authentication
Configure Kudu to enforce secure authentication among servers, and between clients and
  servers.
Authentication prevents untrusted actors from gaining access to Kudu, and securely
   identifies connecting users or services for authorization checks. Authentication in Kudu is
   designed to interoperate with other secure Hadoop components by utilizing Kerberos.
Scalability
Kudu authentication is designed to scale to thousands of nodes, which means it must
    avoid unnecessary coordination with a central authentication authority (such as the Kerberos
    KDC) for each connection.
Instead, Kudu servers and clients use Kerberos to establish initial trust with the
    Kudu master, and then use alternate credentials for subsequent connections. The Kudu master
    issues internal X.509 certificates to tablet servers on startup, and temporary authentication
    tokens to clients on first contact.

Internal private key infrastructure (PKI)
Kudu uses an internal PKI to issue X.509 certificates to servers in the cluster.
    Connections between peers who have both obtained certificates will use TLS for authentication.
    In such cases, neither peer needs to contact the Kerberos KDC.
X.509 certificates are only used for internal communication among Kudu servers, and
    between Kudu clients and servers. These certificates are never presented in a public facing
    protocol. By using internally-issued certificates, Kudu offers strong authentication which
    scales to huge clusters, and allows TLS encryption to be used without requiring you to manually
    deploy certificates on every node.


Kudu authentication with KerberosYou can configure authentication on Kudu servers. Authentication in Kudu is designed to interoperate with other secure Hadoop components by utilizing Kerberos. Kudu authentication tokensAfter authenticating to a secure cluster, the Kudu client will automatically request     an authentication token from the Kudu master. An authentication token encapsulates the identity     of the authenticated user and carries the Kudu master's RSA signature so that its authenticity     can be verified. This token will be used to authenticate subsequent connections. Client authentication to secure Kudu clustersUsers running client Kudu applications must first run the kinit command to obtain a Kerberos ticket-granting     ticket.