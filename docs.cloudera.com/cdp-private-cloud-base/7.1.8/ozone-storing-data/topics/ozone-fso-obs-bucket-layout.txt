Bucket LayoutCloudera Docs
Bucket Layout
Apache Ozone now supports bucket layout feature. This helps you in categorising
    different Ozone buckets like FSO, OBS, and Legacy.
Apache Ozone object store now supports a multi-protocol aware Bucket Layout. The purpose is
      to categorize Ozone Bucket based on the prominent use cases: 
FILE_SYSTEM_OPTIMIZED (FSO) Bucket
Hierarchical FileSystem namespace view with directories and files similar to HDFS. 
Provides high performance namespace metadata operations similar to HDFS. 
Provides capabilities to read/write using Amazon S3. 

OBJECT_STORE (OBS) Bucket - Provides a flat namespace (key-value) similar to Amazon S3. 
LEGACY Bucket - Represents existing pre-created buckets for smooth upgrades from
          previous Ozone version to the new Ozone version


You can create FSO/OBS/LEGACY buckets using following shell commands. You can specify the bucket type in the layout parameter.
    
$ ozone sh bucket create --layout FILE_SYSTEM_OPTIMIZED /s3v/fso-bucket
$ ozone sh bucket create --layout OBJECT_STORE /s3v/obs-bucket
$ ozone sh bucket create --layout LEGACY /s3v/bucket


This table explains the differences between Bucket Type and Client Interface
      
Bucket Type
S3 Compatible Interface
ofs
o3fs (Deprecated, not recommended)


URL Scheme: http://bucket.host:9878/
URL Scheme: ofs://om-id/volume/bucket/key
URL Scheme: o3fs://bucket.volume.om-id/key

FSO
Supports Read, Write, and Delete operations
Supports Read, Write, and Delete operations
Supports Read, Write, and Delete operations

OBS
Supports Read, Write, and Delete operations
Unsupported
Unsupported


noteFSO and OBS are accessible only on CDP Private Cloud 7.1.8 onwards.

Ozone FS namespace optimization with prefixOzone now supports FS namespace optimization with prefix that provides atomicity and     consistency in renaming and deleting files and subdirectories under a directory. Ozone now     handles partial failures and performance is now deterministic. OBS as Pure Object StoreOBS is the existing Ozone Manager metadata format which stores key entries with full     path names, where the common prefix paths will be duplicated for keys like shown in the below     diagram.Parent topic: Multi Protocol Aware System overview