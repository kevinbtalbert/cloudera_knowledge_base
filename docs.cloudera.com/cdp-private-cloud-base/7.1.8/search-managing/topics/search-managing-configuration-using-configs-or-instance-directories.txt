Managing collection configuration using configs or instance directoriesCloudera Docs
Managing collection configuration using configs or instance directories
Both configs and instance directories are configuration sets for Solr collections that
      can be referenced by their respective names. Although configs and instance directories are
      functionally identical from the perspective of the Solr server, there are a number of
      important administrative differences between these two implementations. 
The
            solrctl utility includes the config and
            instancedir commands for managing configuration. Configs and instance
         directories refer to the same thing: named configuration sets used by collections, as
         specified by the solrctl collection --create -c [***CONFIG
               NAME***]
 command.
Table 1. Config and instance directory comparison

Attribute
Config
Instance Directory



Security


In a Kerberos-enabled cluster, the ZooKeeper znodes associated with
                           configurations created using the solrctl config command
                           automatically have proper ZooKeeper ACLs.




No ZooKeeper security support. Any user can create, delete, or modify an
                              instancedir directly in ZooKeeper.
Because instancedir updates ZooKeeper directly, it is
                           the client's responsibility to add the proper ACLs, which can be
                           cumbersome.




Creation method
Generated from existing configs or instance directories in ZooKeeper using
                     the ConfigSets API.
Manually edited locally and re-uploaded directly to ZooKeeper using
                        solrctl utility.


Template support


Predefined templates are available. These can be used as the basis for
                           creating additional configs. Additional templates can be created by
                           creating configs that are immutable.
Mutable configs that use a managed schema can only be modified using the
                           Schema API as opposed to being manually edited. As a result, configs are
                           less flexible, but they are also less error-prone than instance
                           directories.


One standard template.



Cloudera Search config templatesConfig templates are immutable configuration templates that you can use as a starting       point when creating configs for Solr collections. Cloudera Search contains templates by       default and you can define new ones based on existing configs.Generating collection configuration using configsYou must create a collection configuration prior to creating a Solr collection. The         configuration files are created in ZooKeeper based on existing templates using the         ConfigSets API. Learn how to create one using configs.Securing configs with ZooKeeper ACLs and RangerLearn how you can restrict access to configuration sets by setting ZooKeeper Acces     control Lists (ACLs) on all znodes under and including the /solr     directory and using Ranger to control access to the ConfigSets API.Generating Solr collection configuration using instance directoriesYou must create a collection configuration prior to creating a Solr collection. The     configuration files for a Solr collection are stored in a directory called instance directories.     Learn how to create the directory and make it available to Solr by uploading the contents to     Zookeeper. Modifying a collection configuration generated using an instance directoryThe configuration files for a Solr collection are stored in a directory called         instance directories. Learn how to modify the directory and make it available to Solr by         uploading the contents to ZooKeeper. Converting instance directories to configsCloudera Search supports converting existing deployments that use instance directories       to use configs. This allows you to implement access control using ZooKeeper Access Control       Lists and Ranger.Using custom JAR files with SearchSearch supports custom plug-in code. You can load classes into JAR files and then     configure Search to find these files.