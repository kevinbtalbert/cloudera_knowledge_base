Accessing Files Within an Encryption ZoneCloudera Docs
Accessing Files Within an Encryption Zone
To encrypt a new file, the HDFS client requests a new EDEK from the NameNode. The HDFS
    client then asks the KMS to decrypt it with the encryption zone's EZ key. This decryption
    results in a DEK, which is used to encrypt the file.

The diagram above depicts the process of writing a
          new encrypted file. Note that the EDEK cache on the NameNode is
          populated in the background. Since it is the responsibility of KMS to
          create EDEKs, using a cache avoids having to call the KMS for each
          create request. The client can request new EDEKs directly from the
          NameNode.To decrypt a file, the NameNode provides the HDFS client with the file's EDEK and the version
      number of the EZ key that was used to generate the EDEK. The HDFS client requests the KMS to
      decrypt the file's EDEK with the encryption zone's EZ key, which involves checking that the
      requesting client has permission to access that particular version of the EZ key. Assuming
      decryption of the EDEK is successful, the client then uses this DEK to decrypt the file.Encryption and decryption of EDEKs takes place entirely on
          the KMS. More importantly, the client requesting creation or
          decryption of an EDEK never handles the EZ key. Only the KMS can use
          EZ keys to create and decrypt EDEKs as requested. It is important to
          note that the KMS does not store any keys, other than temporarily in
          its cache. It is up to the enterprise keystore to be the authoritative
          storage for keys, and to ensure that keys are never lost, as a lost
          key is equivalent to introducing a security hole. For production use,
          Cloudera recommends you deploy two or more redundant enterprise key
          stores.
Parent topic: Key Concepts and Architecture