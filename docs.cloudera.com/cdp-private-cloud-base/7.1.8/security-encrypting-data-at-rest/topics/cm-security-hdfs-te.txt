HDFS Transparent EncryptionCloudera Docs
HDFS Transparent Encryption
Data encryption is mandatory for many government, financial, and regulatory entities,
    worldwide, to meet privacy and other security requirements. For example, the card payment
    industry has adopted the Payment Card Industry Data Security Standard (PCI DSS) for information
    security. 
Other examples include requirements imposed by United States government's Federal Information
      Security Management Act (FISMA) and Health Insurance Portability and Accountability Act
      (HIPAA). Encrypting data stored in HDFS can help your organization comply with such
      regulations. 
Transparent encryption for HDFS implements transparent, end-to-end encryption of data read
      from and written to HDFS blocks across your cluster. Transparent means that end-users
      are unaware of the encryption/decryption processes, and end-to-end means that data is
      encrypted at-rest and in-transit (see the Cloudera Engineering Blog post for complete details). 
noteHDFS Transparent Encryption is not the same as TLS encryption. Clusters
      configured TLS/SSL encrypt network communications throughout the cluster. Depending on the
      type of services your cluster supports, you may want to configure both HDFS Transparent
      Encryption and TLS/SSL for the cluster.
HDFS encryption has these capabilities: 
Only HDFS clients can encrypt or decrypt data. 
Key management is external to HDFS. HDFS cannot access unencrypted
          data or encryption keys. Administration of HDFS and administration of
          keys are separate duties encompassed by distinct user roles (HDFS
          administrator, Key Administrator), thus ensuring that no single user
          has unrestricted access to both data and keys. 
The operating system and HDFS interact using encrypted HDFS data
          only, mitigating threats at the OS- and file-system-level.
HDFS uses the Advanced Encryption Standard-Counter mode (AES-CTR)
          encryption algorithm. AES-CTR supports a 128-bit encryption key
          (default), or can support a 256-bit encryption key when Java
          Cryptography Extension (JCE) unlimited strength JCE is
            installed.
HDFS encryption has been designed to take advantage of the AES-NI instruction set, a hardware-based
          encryption acceleration technique, so your cluster performance should not adversely
          affected by configuring encryption. (The AES-NI instruction set can be an order of
          magnitude faster than software implementations of AES.) However, you may need to update
          cryptography libraries on your HDFS and MapReduce client hosts to use the acceleration
          mechanism.


Related informationJava Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files 7 DownloadOptimizing Performance for HDFS Transparent EncryptionSetting up Data at Rest Encryption for HDFSKey Concepts and ArchitectureHDFS must be integrated with an external enterprise-level keystore. The Hadoop Key     Management server serves as a proxy between HDFS clients and the keystore. The keystore can be     either the Cloudera Navigator Key Trustee Server or a support Hardware Security     Module.Optimizing Performance for HDFS Transparent EncryptionCDP implements the Advanced Encryption Standard New Instructions (AES-NI),     which provide substantial performance improvements. To get these improvements, you need a recent     version of libcrypto.so on HDFS and MapReduce client hosts -- that is, any host     from which you originate HDFS or MapReduce requests. Managing Encryption Keys and ZonesInteracting with the KMS and creating encryption zones requires the use of two CLI     commands: hadoop key and hdfs crypto. Before getting started     with creating encryption keys and setting up encryption zones, make sure that your KMS ACLs have     been set up according to best practices.Securing the Key Management System (KMS)Cloudera provides the following Key Mangement System (KMS) implementations: Ranger KMS     with database, Ranger KMS with HSM, Ranger KMS with Key Trustee Server, and Ranger KMS with Key     Trustee Server and Key HSM. You can secure Ranger KMS using Kerberos, TLS/SSL communication, and     access control lists (ACLs) for operations on encryption keys. Migrating Keys from a Java KeyStore to Cloudera Navigator Key Trustee ServerYou can migrate keys from an existing Java KeyStore (JKS) to Key Trustee Server to     improve security, durability, and scalability. Migrating Ranger Key Management Server Role Instances to a New Host You can move the Ranger Admin, Ranger KMS db and Ranger KMS KTS role instances for an existing Ranger KMS service from one     host to another, using Cloudera Manager.Migrating ACLs from Key Trustee KMS to Ranger KMSYou must perform the following procedures to migrate ACLs from Key Trustee Key     Management Server (KMS) to Ranger KMS.Configuring CDP Services for HDFS EncryptionThere are recommendations that you must consider for setting up HDFS Transparent     Encryption with various CDP services.Integrating Components for Encrypting Data at RestHow to integrate Cloudera Data Encryption components to provide enterprise data   encryption solutions.Using the Ranger Key Management ServiceRanger KMS can be accessed by logging into the Ranger web UI as the KMS administrator. 