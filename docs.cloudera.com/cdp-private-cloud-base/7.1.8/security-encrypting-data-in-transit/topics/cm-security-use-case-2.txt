Use case 2: Enabling Auto-TLS with an intermediate CA signed by an existing Root CACloudera Docs
Use case 2: Enabling Auto-TLS with an intermediate CA signed by an existing Root CA
You can make the Cloudera Manager CA an intermediate CA to an existing Root
    CA.
importantYou can apply Use Case 2 only to new Cloudera Manager installations that have not had hosts added or clusters created. If you already added hosts or created clusters, then you can implement only Use case 1 and Use case 3.
 This is a three-step process. First, make
      Cloudera Manager generate a Certificate Signing Request (CSR). Second, have the CSR signed by
      the company’s Certificate Authority (CA). Third, provide the signed certificate chain to
      continue the Auto-TLS setup. The following example demonstrates these three steps.
Initialize the certmanager with –stop-at-csr option before starting the Cloudera
          Manager: JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk;
            /opt/cloudera/cm-agent/bin/certmanager --location
            /var/lib/cloudera-scm-server/certmanager setup --configure-services
            --stop-at-csr.
          For more information on the options available for certmanager, and how to use the certmanager’s GenerateCMCA API, see "Certmanager Options - Using CM's GenerateCMCA API"

This generates a Certificate Signing Request (CSR) file at
          /var/lib/cloudera-scm-server/certmanager/CMCA/private/ca_csr.pem. If you examine the CSR
          closely, you notice the CSR request the necessary extension X509v3 Key Usage: critical
          Certificate Sign to sign certificates on its own. 
Sign the ca_csr.pem file with your root CA certificate.
After you have the signed certificate, make sure that the certificate has the required
          extensions – X509v3 Basic Constraints: CA: TRUE and X509v3 Key Usage: Key Cert Sign. 
Proceed with the installation with the following command:
              JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk;
/opt/cloudera/cm-agent/bin/certmanager --location
/var/lib/cloudera-scm-server/certmanager setup
--configure-services --trusted-ca-certs
--signed-ca-cert=cm_cert_chain.pem.

 X509v3 Basic Constraints: critical
   CA:TRUE, pathlen:0
X509v3 Key Usage: critical
   Digital Signature, Certificate Sign, CRL Sign
notecm_cert_chain.pem is a combination of the root CA
            certificate and the CA certificate that is generated by Cloudera Manager..
Start Cloudera Manager on TLS port 7183. If the signed intermediate certificate is
          already imported into the client browser’s truststore, then you should not see any
          warnings. In the screenshot below, “Vkarthikeyan Internal Root CA” is the root
          certificate. This certificate is already trusted by the system and has signed the Cloudera
          intermediate CA.


noteIn this use case, rotation of the Auto-TLS certificate authority is not supported.
        Cloudera recommends creating an intermediate CA with a long lifetime. The host certificates
        can be rotated by using the generateHostCerts API.

Related informationUse case 1: Use Cloudera Manager to generate internal CA and corresponding certificatesUse case 3: Enabling Auto-TLS with Existing CertificatesCertmanager Options - Using CM's GenerateCMCA APICertmanager Options - Using CM's GenerateCMCA APIThis article describes how to use the certmanager’s GenerateCMCA API. It generates the CMCA, which is an OpenSSL self-signed cert and CA directory. It creates and signs the certificate for the CM host. Creates an “internal” truststore with the CA certificate only. If trusted certificates were given, loads them into a “global” truststore. certmanager is part of the CM agent package.Parent topic: Configuring TLS Encryption for Cloudera Manager Using Auto-TLS