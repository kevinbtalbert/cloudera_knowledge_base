Setting ordering policies within a specific queueCloudera Docs
Setting ordering policies within a specific queue
Set FIFO (First In, First Out) or Fair scheduling policies in Capacity Scheduler depending on
    your requirements.
The default ordering policy in Capacity Scheduler is FIFO (First In, First Out). FIFO
      generally works well for predictable, recurring batch jobs, but sometimes not as well for
      on-demand or exploratory workloads. For these types of jobs, Fair Scheduling is often a better
      choice. Flexible scheduling policies enable you to assign FIFO or Fair ordering policies for
      different types of workloads on a per-queue basis.
Examples FIFO and Fair Sharing Policies
Both FIFO (First In, First Out) and Fair scheduling policies work differently in batch
        jobs and ad hoc jobs.
Batch Example
In the below example, two queues have the same resources available. One uses the FIFO
            ordering policy, and the other uses the Fair Sharing policy. A user submits three jobs to
            each queue one after another, waiting just long enough for each job to start. The first job
            uses 6x the resource limit in the queue, the second 4x, and last 2x.

In the FIFO queue, the 6x job would start and run to completion, then the 4x job would start and run to completion, and then the 2x job. They would start and finish in the order 6x, 4x, 2x.
            
In the Fair queue, the 6x job would start, then the 4x job, and then the 2x job. All three would run concurrently, with each using 1/3 of the available application resources. They would typically finish in the following order: 2x, 4x, 6x.
            

Ad Hoc Plus Batch Example
In this example, a job using 10x the queue resources is running. After the job is halfway complete, the same user starts a second job needing 1x the queue resources.

 In the FIFO queue, the 10x job will run until it no longer uses all queue resources (map phase complete, for example), and then the 1x job will start.
In the Fair queue, the 1x job will start, run, and complete as soon as possible –
          picking up resources from the 10x job by attrition.


Best Practices for Ordering Policies

  Ordering policies are configured on a per-queue basis, with the default ordering policy set to FIFO. Fairness is usually 
          best for on-demand, interactive, or exploratory workloads, while FIFO can be more efficient for predictable, recurring batch 
          processing. You should segregate these different types of workloads into queues configured with the appropriate ordering 
          policy.
        
·       In queues supporting both large and small applications, large applications can potentially "starve" 
          (not receive sufficient resources). To avoid this scenario, use different queues for large and small jobs, or use 
          size-based weighting to reduce the natural tendency of the ordering logic to favor smaller applications.
· Use the Maximum AM Resource Limit scheduler property to restrict
          the number of concurrent applications running in the queue to avoid a scenario in which
          too many applications are running simultaneously. Limits on each queue are directly
          proportional to their queue capacities and user limits. This property is specified as a
          float, for example: 0.5 = 50%. The default setting is 0.1=10%. This property can be set
          for all queues by setting the Maximum AM Resource Limit property at the root level, and can also be overridden
          on a per-queue basis by setting the Maximum AM 
            Resource LimitSetting default Application Master resource limitproperty at the queue level.



Configure queue ordering policiesYou can configure the property for queue ordering policies (yarn.scheduler.capacity.<queue-path>.ordering-policy) to FIFO or Fair. The default     setting is FIFO.Parent topic: Configuring per queue properties