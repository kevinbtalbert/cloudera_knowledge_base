Identifying semantic changes and workaroundsCloudera Docs
Identifying semantic changes and workarounds
 As SQL Developer, Analyst, or other Hive user, you need to know potential problems
        with queries due to semantic changes. Some of the operations that changed were not widely
        used, so you might not encounter any of the problems associated with the changes. 
Over the years, Apache Hive committers enhanced versions of Hive supported in legacy
            releases of CDH and HDP, with users in mind. Changes were designed to maintain
            compatibility with Hive applications. Consequently, few syntax changes occurred over the
            years. A number of semantic changes, described in this section did occur, however.
            Workarounds are described for these semantic changes.

Casting timestampsResults of applications that cast numerics to timestamps differ from Hive 2 to Hive         3. Apache Hive changed the behavior of CAST to comply with the SQL Standard, which does not         associate a time zone with the TIMESTAMP type.Casting invalid datesCasting of an invalid date differs from Hive 1 in CDH 5 to Hive 3 in CDP.  Hive 3 uses a   different parser formatter from the one used in Hive 1, which affects semantics. Hive 1 considers   00 invalid for date fields. Hive 3 considers 00 valid for date fields. Neither Hive 1 nor Hive 3   correctly handles invalid dates, and Hive-25056 addresses this issue.Changing incompatible column typesA default configuration change can cause applications that change column types to fail. Understanding CREATE TABLE behaviorHive table creation has changed significantly since Hive 3 to improve useability and   functionality. If you are upgrading from CDH or HDP, you must understand the changes affecting   legacy table creation behavior.Configuring legacy CREATE TABLE behaviorAfter you upgrade to CDP Private Cloud Base and migrate old         tables, the legacy CREATE TABLE behavior of Hive is no longer available by default and you         might want to switch to the legacy behavior. Legacy behavior might solve compatibility         problems with your scripts during data migration, for example, when running ETL.Handling table reference syntaxFor ANSI SQL compliance, Hive 3.x rejects `db.table` in SQL queries as described by the   Hive-16907 bug fix. A dot (.) is not allowed in table names. As a Data Engineer, you need to   ensure that Hive tables do not contain these references before migrating the tables to CDP, that   scripts are changed to comply with the SQL standard references, and that users are aware of the   requirement. Add Backticks to Table ReferencesCDP includes the Hive-16907 bug fix, which rejects `db.table`         in SQL queries. A dot (.) is not allowed in table names. You need to change queries that use         such references to prevent Hive from interpreting the entire db.table string as the         table name.     Handling the Keyword APPLICATIONIf you use the keyword APPLICATION in your queries, you might need to modify  the queries to prevent failure. Dropping partitionsThe OFFLINE and NO_DROP keywords in the CASCADE clause for dropping partitions causes performance problems and is no longer supported.Handling output of greatest and least functions To calculate the greatest (or least) value in a column, you need to work around a         problem that occurs when the column has a NULL value.Renaming tablesTo harden the system, Hive data can be stored in HDFS encryption zones. RENAME has been   changed to prevent moving a table outside the same encryption zone or into a no-encryption   zone.TRUNCATE TABLE on an external tableHive 3 does not support TRUNCATE TABLE on external tables. Truncating an external table       results in an error. You can truncate an external table if you change your applications to set       a table property to purge data.Parent topic: Assessing the Impact of Apache Hive