Apache Hive key featuresCloudera Docs
Apache
      Hive key features
Major changes to Apache Hive 2.x improve Apache Hive 3.x transactions and security.
      Knowing the major differences between these versions is critical for SQL users, including
      those who use Apache Spark and Apache Impala.
Hive is a data warehouse system for summarizing, querying, and analyzing huge, disparate data sets. Cloudera Runtime (CR) services include Hive on Tez and Hive Metastore. Hive on Tez is based on Apache Hive 3.x, a SQL-based data warehouse system. The enhancements in Hive 3.x over previous versions can improve SQL query performance, security, and auditing capabilities. The Hive metastore (HMS) is a separate service, not part of Hive, not even necessarily on the same cluster. HMS stores the metadata on the backend for Hive, Impala, Spark, and other components.
ACID transaction processing
Hive 3 tables are ACID (Atomicity, Consistency, Isolation, and Durability)-compliant.
            Hive 3 write and read operations improve the performance of transactional tables.
            Atomic operations include simple writes and inserts, writes to multiple partitions, and
            multiple inserts in a single SELECT statement. A read operation is not affected by changes 
            that occur during the operation. You can insert or delete data, and it remains consistent
            throughout software and hardware crashes. Creation and maintenance of Hive tables is
            simplified because there is no longer any need to bucket tables.
           

Shared Hive metastore
Cloudera Runtime (CR) services include Hive and Hive Metastore (HMS). HMS supports the
            interoperation of multiple compute engines, Impala and Spark for example. HMS simplifies
            access between various engines and user data access.

Scheduled Queries
Using SQL statements, you can schedule Hive queries to run on a recurring basis,
            monitor query progress, temporarily ignore a query schedule, and limit the number running in parallel. 
            You can use scheduled queries to start compaction and periodically rebuild materialized views, for example.
         

Low-latency analytical processing (CDP Public Cloud)
Hive processes transactions using low-latency analytical processing (LLAP) or the Apache
            Tez execution engine. The Hive LLAP service is not available in CDP Private Cloud Base.

Spark integration with Hive
Spark and Hive tables interoperate using the Hive Warehouse Connector and Spark Direct
            Reader to access ACID managed tables. You can access external tables from Spark directly
            using SparkSQL.
You do not need HWC to read or write Hive external tables. Spark users just read from or
            write to Hive directly. You can read Hive external tables in ORC or Parquet formats. You
            can write Hive external tables in ORC format only. (See link below.)

Security improvements
Apache Ranger secures Hive data by default. To meet demands for concurrency
            improvements, ACID support, render security, and other features, Hive tightly controls
            the location of the warehouse on a file system, or object store, and memory
            resources.
With Apache Ranger and Apache Hive ACID support, your organization will be ready to
            support and implement GDPR (General Data Protection Regulation).

Workload management at the query level
You can configure who uses query resources, how much can be used, and how fast Hive
            responds to resource requests. Workload management can improve parallel query execution,
            cluster sharing for queries, and query performance. Although the names are similar, Hive
            workload management queries are unrelated to Cloudera Workload XM for reporting and
            viewing millions of queries and hundreds of databases.  

Materialized views
Because multiple queries frequently need the same
            intermediate roll up or joined table, you can avoid costly, repetitious query portion
            sharing, by precomputing and caching intermediate tables into views. 

Query results cacheHive filters and caches similar or identical queries. Hive does not recompute the data that has not changed. Caching repetitive queries can reduce the load substantially when hundreds or thousands of users of BI tools and web services query Hive.
Connection Pooling
Hive supports HikariCP JDBC connection pooling.


Related informationBlog: Enabling high-speed Spark direct reader for Apache Hive ACID tablesParent topic: Assessing the Impact of Apache Hive