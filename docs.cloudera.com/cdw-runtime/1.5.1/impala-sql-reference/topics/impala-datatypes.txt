Impala SQL data typesCloudera Docs
Impala SQL data types
Impala supports a set of data types that you can use for table columns, expression
    values, and function arguments and return values. You must be aware of the supported data types,
    the purpose each data type serves, and the casting behaviour for each data type, prior to using
    them.noteCurrently, Impala supports only scalar types, not composite or nested types. Accessing a table
        containing any columns with unsupported types causes an error.  For the notation to write literals of each of these data types, see Literals. 
 Impala supports a limited set of implicit casts to avoid undesired
        results from unexpected casting behavior. 

 Impala does not implicitly cast between string and numeric or
          Boolean types. Always use CAST() for these
          conversions. 
 Impala does perform implicit casts among the numeric types, when
          going from a smaller or less precise type to a larger or more precise
          one. For example, Impala will implicitly convert a
            SMALLINT to a BIGINT or
            FLOAT, but to convert from DOUBLE
          to FLOAT or INT to
            TINYINT requires a call to CAST()
          in the query. 
 Impala does perform implicit casts from STRING to
            TIMESTAMP. Impala has a restricted set of literal
          formats for the TIMESTAMP data type and the
            FROM_UNIXTIME() format string; see TIMESTAMP data type for details. 

See the topics under this section for full details on implicit and
        explicit casting for each data type, and see Impala type conversion functions for
        details about the CAST() function.
Related informationImpala SQL literalsSQL differences between Impala and HiveARRAY complex typeReview the syntax, usage, and restrictions related to the ARRAY data type which is a     complex data type that can represent an arbitrary number of ordered elements. The elements can     be scalars or another complex type (ARRAY, STRUCT, or       MAP). BIGINT data typeAn 8-byte integer data type used in CREATE TABLE and ALTER       TABLE statements. BOOLEAN data typeA data type used in CREATE TABLE and ALTER TABLE     statements, representing a single true/false choice.CHAR data typeA fixed-length character type, padded with trailing spaces if necessary to achieve the     specified length. If values are longer than the specified length, Impala truncates any trailing     characters.DATE data type Use the DATE data type to store date values. DECIMAL data typeThe DECIMAL data type is a numeric data type with fixed scale and     precision. The data type is useful for storing and doing operations on precise decimal     values.DOUBLE data typeA double precision floating-point data type used in CREATE TABLE and       ALTER TABLE statements.FLOAT data typeA single precision floating-point data type used in CREATE TABLE and       ALTER TABLE statements. INT data typeA 4-byte integer data type used in CREATE TABLE and ALTER       TABLE statements.MAP complex typeA complex data type representing an arbitrary set of key-value pairs. The key part is a     scalar type, while the value part can be a scalar or another complex type       (ARRAY, STRUCT, or MAP).REAL data typeAn alias for the DOUBLE data type.SMALLINT data typeA 2-byte integer data type used in CREATE TABLE and ALTER       TABLE statements.STRING data typeA data type used in CREATE TABLE and ALTER TABLE     statements.STRUCT complex typeA complex data type, representing multiple fields of a single item. Frequently used as     the element type of an ARRAY or the VALUE part of a       MAP.TIMESTAMP data typeIn Impala, the TIMESTAMP data type holds a value of date and time. It     can be decomposed into year, month, day, hour, minute and seconds fields, but with no time zone     information available, it does not correspond to any specific point in time.TINYINT data typeA 1-byte integer data type used in CREATE TABLE and ALTER       TABLE statements.VARCHAR data typeA variable-length character type, truncated during processing if necessary to fit     within the specified length. Complex typesComplex types (also referred to as nested types) let you     represent multiple data values within a single row/column position. They differ from the     familiar column types such as BIGINT and STRING, known as       scalar types or primitive types, which represent a single data value     within a given row/column position. Impala supports the complex types ARRAY,       MAP, and STRUCT in Impala 2.3 and higher. The Hive       UNION type is not currently supported.