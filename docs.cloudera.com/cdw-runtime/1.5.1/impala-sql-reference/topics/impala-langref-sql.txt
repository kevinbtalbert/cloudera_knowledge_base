Impala SQL statementsCloudera Docs
Impala SQL statements
The Impala SQL dialect supports a range of standard elements, plus some extensions for
    Big Data use cases related to data loading and data warehousing.note

        In the impala-shell interpreter, a semicolon at the end of each statement is required.
        Since the semicolon is not actually part of the SQL syntax, we do not include it in the syntax definition
        of each statement, but we do show it in examples intended to be run in impala-shell.
      

      The following sections show the major SQL statements that you work with in Impala:
    
ROLE statements in Impala integrated with RangerAfter upgrading or migrating your workload from CDH to CDP you will have started     using Apache Ranger as the authorization provider in Impala. This replaces Apache Sentry.     There are some differences in Impalaâ€™s behavior which you must be aware of when using Ranger     as the authorization provider.DDL statementsDDL refers to Data Definition Language, a subset of SQL statements that change     the structure of the database schema in some way, typically by creating, deleting, or modifying     schema objects such as databases, tables, and views. Most Impala DDL statements start with the     keywords CREATE, DROP, or ALTER.DML statementsDML refers to Data Manipulation Language, a subset of SQL statements that modify         the data stored in tables. Because Impala focuses on query performance and leverages the         append-only nature of HDFS storage, currently Impala only supports a small set of DML         statements.ALTER DATABASE statementThe ALTER DATABASE statement changes the characteristics of a     database.ALTER TABLE statementThe ALTER TABLE statement changes the structure or properties of an     existing Impala table.ALTER VIEW statementThe ALTER VIEW statement changes the characteristics of a     view.COMMENT statementThe COMMENT statement adds, changes, or removes a comment about a     database, a table, or a column.COMPUTE STATS statementThe COMPUTE STATS statement gathers information about volume and     distribution of data in a table and all associated columns and partitions. The information is     stored in the metastore database, and used by Impala to help optimize queries.CREATE DATABASE statementThe CREATE DATABASE statement is used to create a new database. CREATE FUNCTION statementCreates a user-defined function (UDF), which you can use to implement custom logic     during SELECT or INSERT operations.CREATE ROLE statementThe CREATE ROLE     statement creates a role to which privileges can be granted. Privileges can be granted to roles,     which can then be assigned to a group and the users belonging to the group will be assigned the     role. A user that has been assigned a role will only be able to exercise the privileges of that     role. Only users with administrative privileges can create/drop roles. By default, the       Impala users do not have administrative privileges in Ranger. For Impala     users to have administrative privileges in Ranger you must use Ranger Web UI and     configure.CREATE TABLE statementThe CREATE TABLE statement creates a new table     with the  specified properties. CREATE VIEW statementThe CREATE VIEW statement lets you create a shorthand abbreviation for     a more complicated query. The base query can involve joins, expressions, reordered columns,     column aliases, and other SQL features that can make a query hard to understand or     maintain.DELETE statementThe DELETE statement deletes an arbitrary number of rows from a Kudu     table. This statement only works for Impala tables that use the Kudu storage engine.DESCRIBE statementThe DESCRIBE statement displays metadata about a table, such as the     column names and their data types. In Impala 2.3 and higher, you can specify the       name of a complex type column, which takes the form of a dotted path. The path might include       multiple components in the case of a nested type definition. In Impala 2.5 and higher, the DESCRIBE DATABASE form can       display information about a database.DROP DATABASE statementThe DROP DATABASE statement removes a database from the system. The     physical operations involve removing the metadata for the database from the metastore, and     deleting the corresponding *.db directory from HDFS.DROP FUNCTION statementThe DROP FUNCTION statement removes a user-defined function (UDF), so     that it is not available for execution during Impala SELECT or       INSERT operations.DROP ROLE statement The DROP ROLE statement removes a role from the metastore database.     Once dropped, the role is revoked for all groups it was previously assigned. Queries that are     already executing are not affected. Impala verifies the role information approximately every 60     seconds, so the effects of DROP ROLE might not take effect for new Impala     queries for a brief period.DROP STATS statementThe DROP STATS statement removes the specified statistics from a table     or partition. The statistics were originally created by the COMPUTE STATS or       COMPUTE INCREMENTAL STATS statement.DROP TABLE statementThe DROP TABLE statement removes an Impala table. Also removes the     underlying HDFS data files for internal tables, although not for external tables. DROP VIEW statementThe DROP VIEW statement removes the specified view, which was     originally created by the CREATE VIEW statement. Because a view is purely a     logical construct (an alias for a query) with no physical data behind it, DROP       VIEW only involves changes to metadata in the metastore database, not any data files     in HDFS.EXPLAIN statementThe EXPLAIN statement returns the execution plan for a statement,     showing the low-level mechanisms that Impala will use to read the data, divide the work among     nodes in the cluster, and transmit intermediate and final results across the     network.GRANT statementThe GRANT statement grants a privilege on a     specified object to a user or to a group.GRANT ROLE statement     The GRANT statement assigns a role to a group.   INSERT statementImpala supports inserting into tables and partitions that you create with the Impala       CREATE TABLE statement, or pre-defined tables and partitions created through     Hive.INVALIDATE METADATA statementThe INVALIDATE METADATA statement marks the metadata for one or all     tables as stale. The next time the Impala service performs a query against a table whose     metadata is invalidated, Impala reloads the associated metadata before the query proceeds. As     this is a very expensive operation compared to the incremental metadata update done by the       REFRESH statement, when possible, prefer REFRESH rather than       INVALIDATE METADATA. LOAD DATA statementThe LOAD DATA statement streamlines the ETL process for an internal     Impala table by moving a data file or all the data files in a directory from an HDFS location     into the Impala data directory for that table.REFRESH statementThe REFRESH statement reloads the metadata for the table from the     metastore database and does an incremental reload of the file and block metadata from the HDFS     NameNode. REFRESH is used to avoid inconsistencies between Impala and external     metadata sources, namely Hive Metastore (HMS) and NameNodes.REFRESH AUTHORIZATION statementThe REFRESH AUTHORIZATION statement explicitly     refreshes authorization data, including privileges and principals. When     there is an external update to authorization metadata, use this statement to     force Impala to refresh its authorization data without having to wait for     the Ranger polling or run INVALIDATE METADATA.REFRESH FUNCTIONS statementIn Impala 2.9 and higher, you can run the REFRESH FUNCTIONS statement     to refresh the user-defined functions (UDFs) created outside of Impala. For example, you can add     Java-based UDFs to the metastore database through the Hive CREATE FUNCTION     statements and make those UDFs visible to Impala at the database level by subsequently running       REFRESH FUNCTIONS. REVOKE statementThe REVOKE statement revokes privileges on a     specified object from groups or users. REVOKE ROLE statement     The REVOKE statement REMOVES the role assigned to the group.   SELECT statementThe SELECT statement performs queries, retrieving data from one or     more tables and producing result sets consisting of rows and columns. SET statementThe SET statement specifies values for query options that control the     runtime behavior of other statements within the same session. SHOW statementUse the SHOW statement to get information about     different types of Impala objects.SHOW ROLES statement The SHOW ROLES statement displays all the roles created in the Ranger     server.SHOW CURRENT ROLES statement The SHOW CURRENT ROLES statement displays the roles assigned to the groups of the requesting user.SHOW ROLE GRANT GROUP statement The SHOW ROLE GRANT GROUP statement displays the roles assigned to     the group.SHUTDOWN statementThe SHUTDOWN statement performs a graceful shutdown of Impala Daemon.     The Impala daemon will notify other Impala daemons that it is shutting down, wait for a grace     period, then shut itself down once no more queries or fragments are executing on that daemon.     The --shutdown_grace_period_s flag determines the duration of the grace period     in seconds.TRUNCATE TABLE statementThe TRUNCATE TABLE statement removes the data from an Impala table     while leaving the table itself. UPDATE statementThe UPDATE statement updates an arbitrary number of rows in a Kudu     table. This statement only works for Impala tables that use the Kudu storage engine.UPSERT statementThe UPSERT statement acts as a combination of the       INSERT and UPDATE statements.USE statementThe USE statement switches the current session to a specified     database. The current database is where any CREATE TABLE,       INSERT, SELECT, or other statements act when you specify a     table or other object name, without prefixing it with a database name. The new current database     applies for the duration of the session or unti another USE statement is     executed.VALUES statementThe VALUES clause can be used as stand-alone     statement, in the INSERT statement, and in the       SELECT statement to construct a data set. Optimizer hints in ImpalaThe Impala SQL dialect supports query hints, for fine-tuning the inner workings of     queries. Specify hints as a temporary workaround for expensive queries, where missing statistics     or other factors cause inefficient performance.Query optionsSpecify query options in the SET statement to     apply the settings to the subsequently issued queries.