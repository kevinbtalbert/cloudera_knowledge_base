Securing Apache Flink jobsCloudera Docs
Securing Apache Flink jobs
Submitting Flink jobs in a secure environment requires every security parameter for
    authentication, authorization and other connector related security settings. You should prepare
    your keystore and keytab files for Flink and for also the chosen connector component. 
The following example shows the security parameters that are needed to submit a Flink
      job:flink run -d -p 2 \
-yD security.kerberos.login.keytab=test.keytab \
-yD security.kerberos.login.principal=test \
-yD security.ssl.internal.enabled=true \
-yD security.ssl.internal.keystore=keystore.jks \
-yD security.ssl.internal.key-password=`cat pwd.txt` \
-yD security.ssl.internal.keystore-password=`cat pwd.txt` \
-yD security.ssl.internal.truststore=keystore.jks \
-yD security.ssl.internal.truststore-password=`cat pwd.txt` \
-yt keystore.jks \
flink-secure-tutorial-1.0-SNAPSHOT.jar \
--kafkaTopic flink \
--hdfsOutput hdfs:///tmp/flink-secure-tutorial \
--kafka.bootstrap.servers <broker_host>:9093 \
--kafka.security.protocol SASL_SSL \
--kafka.sasl.kerberos.service.name kafka \
--kafka.ssl.truststore.location /etc/cdep-ssl-conf/CA_STANDARD/truststore.jks
The Kerberos and TLS properties are user specific parameters. Generally the cluster
      administrator provides the Kerberos keytab and TLS certificate to the user. In case you did
      not receive the keytab and keystore file from the administrator, you can use the following
      commands:> ktutil
ktutil: add_entry -password -p test -k 1 -e des3-cbc-sha1
Password for test@:
ktutil:  wkt test.keytab
ktutil:  quitkeytool -genkeypair -alias flink.internal -keystore keystore.jks -dname "CN=flink.internal" -storepass `cat pwd.txt` -keyalg RSA -keysize 4096 -storetype PKCS12

noteThe keytool can be accessed at /usr/java/default/bin/keytool if the
     JAVA_HOME is not set globally on the host.

The full explanation of the properties used in the example can be found in the Secure Tutorial.
   It also includes how to enable security features step-by-step for Flink applications that are
   running on secured CDP Private Cloud Base environments.

Related informationSecure TutorialParent topic: Securing Apache Flink