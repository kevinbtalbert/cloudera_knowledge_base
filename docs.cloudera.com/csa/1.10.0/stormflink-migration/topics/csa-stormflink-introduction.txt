Comparing Storm and FlinkCloudera Docs
Comparing Storm and Flink
Before you start the migration process from Storm to Flink, you need to understand the
  differences and similarities between the two frameworks. You can create real-time data processing
  applications with both systems, but there are differences in concept,
  architecture,
  and data distribution. Understanding these differences can make the migration process
  easier.
Conceptual differencesStorm and Flink can process unbounded data streams in real-time with low latency. Storm   uses tuples, spouts, and bolts that construct its stream processing topology. For Flink, you need   sources, operators, and sinks to process events within its data pipeline. Other than the   terminology, the two systems handle state differently. Furthermore, Flink has an event windowing   function to achieve exatly-once processing.Differences in architectureThe basic architecture of task execution is similar in Storm and Flink. The main     difference between the two systems is that Workers and Executors are responsible for executing     the tasks in Storm, while in Flink the execution is done by only the Task Managers. The Task     Managers also manage the state backend, which is a durable storage for storing     states.Differences in data distributionBoth Flink and Storm distribute data within their processing elements. Stream grouping   in Storm controls the routing of tuples. There is no similar function in Flink, but you can use   keys and the broadcast function on your data stream to handle the distribution of   events.