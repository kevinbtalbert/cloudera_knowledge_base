Creating a custom Airflow Python environment (Technical Preview)Cloudera Docs
Creating a custom Airflow Python environment (Technical Preview)
To manage job dependencies, Cloudera Data Engineering (CDE) supports creating custom
    Python environments dedicated to Airflow using the airflow-python-env resource type. With this
    option, you can install custom libraries for running your Directed Acyclic Graphs (DAGs). The
    supported version is Python 3.8.
A resource is a named collection of files or other resources referenced
      by a job. The airflow-python-env resource type allows you to specify a
        requirements.txt file that defines an environment that you can then
      activate globally for airflow deployments in a virtual cluster. You can specify any Python
      package which is compatible with the Airflow python constraints. These constraints can be
      found at
        https://raw.githubusercontent.com/apache/airflow/constraints-${AIRFLOW_VERSION}/constraints-${PYTHON_VERSION}.txt.
      The Airflow and Python versions depend on your CDE version.

Related informationResourcerequirements.txt Creating a custom Airflow Python environment resourceCreate the custom Airflow Python environment resource. You can specify the       pip repositories if required.Uploading the resource to build the Python environmentAfter you create the resource, you have to upload the resource to build your     environment.Activating Python environment resourcesAirflow-related deployments must be configured to use the new Python environment and     have to be restarted to use the newly created Python environment.Resetting to the default Airflow Python environmentYou can reset the Python environment to the default Airflow Python environment     resources.Deleting Airflow Python environment resourcesYou can delete the custom Python environment resources when it is not active and if not     needed.