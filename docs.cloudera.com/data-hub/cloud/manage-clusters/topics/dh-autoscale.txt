Autoscaling clustersCloudera Docs
Autoscaling clusters
Autoscaling is a feature that adjusts the capacity of cluster nodes running YARN by
    automatically increasing or decreasing, or suspending and resuming, the nodes in a host group.
    You can enable autoscaling based either on a schedule that you define, or the real-time demands
    of your workloads.
Load-based autoscaling
note
Load-based autoscaling is available for clusters provisioned in AWS and Azure, with the
          following Runtime versions:

7.2.15 and higher


Load-based autoscaling suspends and resumes (stops and starts) instances on the
        cloud provider to increase or decrease capacity for nodes running NodeManagers (for example,
        the compute host group), based upon YARNâ€™s assessment of pending demand and available
        capacity. Load-based autoscaling can help control costs while providing quick, on-demand
        cluster capacity when you need it (within a few minutes).
When you configure a load-based autoscaling policy, you choose a minimum and
        maximum number of nodes for the host group. The maximum number of nodes determines how many
        instances are provisioned, but these instances are suspended and resumed as the workload
        demand requires. The policy will not provision instances beyond the maximum range of nodes
        that you define, regardless of the demand on the cluster. You also define a cooldown period,
        which is the amount of time in minutes to wait before another autoscaling operation is
        performed.

Schedule-based autoscaling
note
Schedule-based autoscaling is available for clusters provisioned in AWS and Azure with
          the following Runtime versions:

7.2.15 and higher


Schedule-based autoscaling scales the nodes in a host group up or down based upon
        a schedule that you define. Schedule-based autoscaling is useful if workload demands tend to
        be high or low on a fairly regular, consistent basis.
When you configure a schedule-based autoscaling policy, you define a target node
        count, which is the number of nodes that you want to scale up or down to at a particular
        time. You also select whether or not to repeat the schedule, and finalize the schedule by
        entering a CRON expression and selecting the desired timezone. When the particular time/date
        that you define in the CRON expression occurs, the cluster is upscaled or downscaled to your
        target node count. The time taken to add nodes to a cluster varies by cloud provider and the
        configuration of the nodes (for example, recipes can have an impact on the time it takes to
        add a node).
noteTypically, schedules (especially those configured to scale-up) should be defined in a
        manner to factor in the time it takes to add new nodes. For example, workloads starting at
        9pm will typically set a scale-up schedule for 8:45 pm, assuming it takes around 15 minutes
        to add a node.

General considerations
Currently, YARN NodeManager is the only service compatible with autoscaling.
        Because of this, autoscaling is only available by default in the Data Engineering and Data
        Engineering HA cluster definitions. Autoscaling can also be configured for clusters with
        custom templates that include YARN NodeManager and the necessary gateway components. 

Known Limitations


Load-based autoscaling does not work with YARN dynamic queues.




Autoscaling behaviorBefore you define an autoscaling policy, note the following autoscaling     behaviors.Configuring autoscalingTo configure autoscaling, add a load-based or schedule-based policy to a cluster and     define the policy parameters.Using YARN queues with autoscalingBeyond the regular considerations to keep in mind while configuring YARN queues, a few     additional aspects need to be considered, and some additional YARN configuration parameters are     required.Managing autoscalingThe CDP CLI has two options for reviewing autoscaling activity.Manually recovering from load-based scaling failuresThe mechanics for scaling are straightforward. There are four operations performed, and     instances are not deleted during a load-based scale-down. Scale-up and scale-down operations are     also meant to fail relatively fast, so that manual repair operations, if necessary, can be     performed faster. Additionally, these operations can also be performed if there is another     Management Operation (other than scaling) already in progress, which would otherwise block     scaling.Autoscaling FAQReview frequently asked questions about Data Hub autoscaling.