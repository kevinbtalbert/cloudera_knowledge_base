Creating and using a materialized viewCloudera Docs
Creating and using a materialized view
You can create a materialized view of a query to calculate and store results of an
        expensive operation, such as a particular join, on a managed, ACID table that you repeatedly
        run. When you issue queries specified by that materialized view, the optimizer rewrites the
        query based on it. This action saves reprocessing. Query performance improves. 

In the tasks that follow, first you create, or use an existing, Hive Virtual
                Warehouse. You create and populate example tables. The tables are managed tables.
                You cannot create a materialized view of an external table. You create a
                materialized view of a join of the tables. Subsequently, you run a query to join the
                tables, and the query plan takes advantage of the precomputed join to accelerate
                processing. These over-simplified tasks show the syntax and output of a materialized
                view, and do not demonstrate accelerated processing that occurs in a real-world
                task, processing a large amount of data.



You have access to an existing Hive Virtual Warehouse, or you created a new
                    one.
You have a client connection, such as Beeline, to Hive in CDP.



Creating the tables and viewYou see how to create simple tables, insert the data, and join the tables using a materialized view. You run the query, and the optimizer takes advantage of the precomputation performed by the materialized view to speed response time.Verifying the query rewrite You can check that a materialized view is used as a query rewrite.Query rewrite exampleYou examine a materialized view definition and see how an example query that matches a materialized view is rewritten transparently.Managing query rewritesAfter changes to base tables, the data in a materialized view is stale. You need to         know how to prevent the SQL optimizer from rewriting queries in this situation. If you want         a query executed without regard to a materialized view, for example to measure the execution         time difference, you can disable rewriting and then enable it again. Using optimizations from a subqueryYou can create a query having a subquery that the optimizer rewrites based on a         materialized view. You create a materialized view, and then run a query that uses the         materialized view.Dropping a materialized viewYou must understand when to drop a materialized view to successfully drop related tables.Showing materialized viewsYou can list all materialized views in the current database or in another     database. You can filter a list of materialized views in a specified database using regular expression wildcards.Describing a materialized viewYou can get summary, detailed, and formatted information about a materialized         view.Periodically rebuilding a materialized view Using materialized views can enhance query performance. You need to update         materialized view contents when new data is added to the underlying table. Instead of         rebuilding the materialized view manually, you can schedule this task. Automatic rebuilding         then occurs periodically and transparently to users. Incremental rebuildsThe materialized view is a physical manifestation and summary of the original data in     your table. If the source table, or multiple tables in the case of joins, changes, you likely     want updates to the materialized view.Purposely using a stale materialized viewWhen materialized view data becomes stale, or when the optimizer cannot determine the         data freshness, which is the case if you use external tables, you might want to use the         materialized view anyway: Creating and using a partitioned materialized viewWhen creating a materialized view, you can partition selected columns to improve         performance. Partitioning separates the view of a table into parts, which often improves         query rewrites of partition-wise joins of materialized views with tables or other         materialized views.Parent topic: Materialized views