



Deploying Java on Cluster Instances | 6.3.x | Cloudera Documentation










































 Documentation


Products
Services & Support
Solutions









Cloudera Altus DirectorÂ 6.3.x | Other versions





Configuring and Running Altus Director








View All Categories

Introduction

Displaying Altus Director Documentation
Altus Director Interfaces


Release Notes

New Features and Changes
Known Issues
Fixed Issues
Unsupported Components and Features
Altus Director API


Requirements and Supported Versions
Getting Started

Amazon Web Services (AWS)

Preparing Your AWS EC2 Resources
Launching an EC2 Instance for Altus Director

Choosing an AMI


Installing Altus Director Server and Client on the EC2 Instance
Subscribing to Altus Director in the AWS Marketplace
Configuring a SOCKS Proxy for Amazon EC2
Adding an Altus Director Environment on AWS
Simple Setup: Creating a Cluster on AWS with Default Settings
Advanced Setup: Installing Cloudera Manager and CDH on AWS
Pausing a Cluster on AWS
Cleaning Up Your AWS Deployment
Using Custom DNS in AWS


Google Cloud Platform

Creating a Google Cloud Platform Project
Configuring Tools for Your Google Cloud Platform Account
Creating a Google Compute Engine VM Instance
Installing Altus Director Server and Client on Google Compute Engine
Configuring a SOCKS Proxy for Google Compute Engine
Deploying Cloudera Manager and CDH on Google Compute Engine
Cleaning Up Your Google Cloud Platform Deployment


Microsoft Azure

Obtaining Credentials for Altus Director
Setting up Azure Resources
Setting Up Dynamic DNS on Azure
Setting Up MySQL or PostgreSQL
Setting Up a Virtual Machine for Altus Director Server
Installing Altus Director Server and Client on Azure
Configuring a SOCKS Proxy for Microsoft Azure
Allowing Access to VM Images
Adding an Altus Director Environment on Azure
Simple Setup: Creating an Azure Cluster with Default Settings
Advanced Setup: Installing Cloudera Manager and CDH on Azure
Terminating an Azure Deployment
Adding New VM Images, Custom VM Images, Regions, and Instances
Important Notes About Altus Director and Azure




Usage-Based Billing

Usage Bundles


Using Cloud Provider Regions

Running Altus Director and Cloudera Manager in Different Regions or Clouds
Using a New AWS Region in Altus Director


Configuring Storage for Altus Director

Using MySQL for Altus Director Server
Using MariaDB for Altus Director Server
Altus Director Database Encryption
Migrating the Altus Director Database


Configuring Storage for Cloudera Manager and CDH

Using an External Database for Cloudera Manager and CDH

Defining External Database Servers
Defining External Databases
Using the External Databases for Cloudera SDX


Using Amazon S3 Object Storage


Using EBS Volumes for Cloudera Manager and CDH
Security, Encryption, and High Availability

Enabling TLS with Altus Director
SSH Host Key Retrieval and Verification
Creating Kerberized Clusters With Altus Director
Enabling Sentry Service Authorization
Creating Highly Available Clusters With Altus Director
Encrypted Configuration Properties


Configuring and Running Altus Director

Auto-Repair for Failed or Terminated Instances
Deploying Java on Cluster Instances
Setting Altus Director Properties
Pausing Altus Director Instances
Configuring Altus Director Server for LDAP and Active Directory
Configuring Altus Director for a New AWS Instance Type
Configuring Altus Director to Use Custom Tag Names on AWS


Running Altus Director Behind a Proxy

Configuring Cloudera Manager to Use a Proxy
Configuring Other Software to Use a Proxy
Configuring Altus Director to Use a Proxy
Authenticating Proxies
HTTPS Proxies


Using Altus Director Server to Manage Cloudera Manager Instances

Altus Director and Cloudera Manager Usage
Setting Cloudera Manager Configurations
Ports Used by Altus Director
SSH Keys in Altus Director
Creating AWS Identity and Access Management (IAM) Policies
Using Custom Repositories with Cloudera Manager and CDH
Cloudera Manager Health Information
Opening Cloudera Manager
Diagnostic Data Collection
User Management


Using Altus Director Server to Manage Cluster Instances

The Altus Director Configuration File
Submitting a Cluster Configuration File
Exporting a Configuration File
Deploying Clusters in an Existing Environment
Using Spot Instances
Using Automatic Instance Groups
Using Products outside CDH with Altus Director

Custom Service Descriptors
Using Kudu with CDH 5.12 or Earlier
Using Spark 2 with Altus Director
Using Cloudera Data Science Workbench with Altus Director
Using Third-Party Products with Altus Director


Creating and Modifying Clusters with the Altus Director Web UI
Altus Director Scripts
Terminating a Cluster


Using the Altus Director Client

Installing Altus Director Client
Provisioning a Cluster on AWS
Running Altus Director Client


Upgrading Altus Director
Troubleshooting
FAQ
Altus Director Glossary





To read this documentation, you must turn JavaScript on.




Deploying Java on Cluster Instances

When you set up Cloudera Manager and CDH clusters in the cloud, a version of the Java JDK must be installed on each instance. Choose one of the three JDK installation strategies
described below for your Cloudera Manager instance and the CDH clusters it manages. The JDK installation strategy can be set using a configuration file or using the Altus Director API, but it is not
currently configurable in the Altus Director web UI.
Once a particular JDK installation strategy has been used to bootstrap a new Cloudera Manager deployment and JDK cluster, Altus Director continues to follow that JDK installation
strategy for all additional clusters added to that Cloudera Manager deployment.


AUTO JDK Installation Strategy

With the AUTO setting, Altus Director installs the JDK on the Cloudera Manager node, and then Cloudera Manager handles JDK installation for all instances in the cluster. If needed, Altus
Director also installs unlimited strength JCE policy files on the Cloudera Manager instance, and directs Cloudera Manager to install them on all cluster instances.
When you use the AUTO JDK installation strategy, you can specify the Java version that Director installs on the Cloudera Manager node. You cannot specify the Java version that Cloudera
Manager installs on the CDH clusters.
Altus Director verifies the Cloudera Manager version and determines the JDK version to install based on the following Java package properties in the application.properties file:

lp.bootstrap.packages.cmJavaPackages. If Altus Director can determine the Cloudera Manager version, Altus Director installs the Java package
specified in the cmJavaPackages property.
The property is a list of key-value pairs, where each key is a regular expression for a Cloudera Manager version, and each value is the corresponding Java package to install. For
example, with the following property settings, Altus Director installs Oracle JDK 8 on Cloudera Manager 6.x and Oracle JDK 7 on Cloudera Manager 5.x:

lp.bootstrap.packages.cmJavaPackages[0]: "6\\..*=oracle-j2sdk1.8"
lp.bootstrap.packages.cmJavaPackages[1]: "5\\..*=oracle-j2sdk1.7"

lp.bootstrap.packages.defaultCmJavaPackage. If Altus Director cannot determine the Cloudera Manager version, Altus Director installs the Java package
specified in the defaultCmJavaPackage property.
For example, the following property settings installs Oracle JDK 8 on all Cloudera Manager nodes:

lp.bootstrap.packages.defaultCmJavaPackage: oracle-j2sdk1.8



By default, Altus Director installs Oracle JDK 8 for Cloudera Manager 6.x and Oracle JDK 7 for Cloudera Manager 5.x on all nodes, as indicated by the default values specified in the
lp.bootstrap.packages.cmJavaPackages and lp.bootstrap.packages.defaultCmJavaPackage properties in the application properties
file.
You can set the lp.bootstrap.packages.cmJavaPackages and lp.bootstrap.packages.defaultCmJavaPackage properties with
the JDK version that you want to install on the Cloudera Manager node. For example, if you want to install Oracle JDK 8 on Cloudera Manager, set cmJavaPackages to
.*=oracle-j2sdk1.8 and defaultCmJavaPackage to oracle-j2sdk1.8.
If you want to install OpenJDK, set the properties to the OpenJDK package for the version you want to install. For example, with the following property settings, Altus Director
installs OpenJDK 8 on Cloudera Manager 6.x and OpenJDK 7 on Cloudera Manager 5.x:

lp.bootstrap.packages.cmJavaPackages[0]: "6\\..*=java-1.8.0-openjdk"
lp.bootstrap.packages.cmJavaPackages[1]: "5\\..*=java-1.7.0-openjdk"
You must ensure that yum is configured with a repository that contains the Java package you have chosen, as described below:

If you select oracle-j2sdk1.8 for Cloudera Manager 6.x, which is the default behavior for Altus Director, then you don't have to do anything further, because Altus Director always
configures the Cloudera Manager repository, and the Cloudera Manager repository has oracle-j2sdk1.8.
If you select oracle-j2sdk1.8 for Cloudera Manager 5.x, then you need to use a bootstrap script or AMI that ensures that the right yum repository is configured. The repository for
Altus Director 2.x has oracle-j2sdk1.7 and oracle-j2sdk1.8.
To install OpenJDK instead of Oracle JDK, ensure that the yum repository contains the OpenJDK Java version that you require.


AUTO is the default JDK installation strategy, so it is not necessary to specify it in a configuration file or using the API. All installations done with the Altus Director web UI use
the default AUTO setting.



DIRECTOR_MANAGED JDK Installation Strategy

With the DIRECTOR_MANAGED setting, Altus Director installs the JDK for all Cloudera Manager and cluster instances from a yum repository. The JDK installation includes unlimited strength
JCE policy files, should you require them.
When you use the DIRECTOR_MANAGED installation strategy, you can specify the Java version that Director installs on the Cloudera Manager node and on the CDH clusters.
Altus Director verifies the Cloudera Manager version and determines the JDK version to install based on the following Java package properties in the application.properties file:

lp.bootstrap.packages.cmJavaPackages. If Altus Director can determine the Cloudera Manager version, Altus Director installs the Java package
specified in the cmJavaPackages property.
The property is a list of key-value pairs, where each key is a regular expression for a Cloudera Manager version, and each value is the corresponding Java package to install. For
example, with the following property settings, Altus Director installs Oracle JDK 8 on Cloudera Manager 6.x and CDH clusters and Oracle JDK 7 on Cloudera Manager 5.x and CDH clusters:

lp.bootstrap.packages.cmJavaPackages[0]: "6\\..*=oracle-j2sdk1.8"
lp.bootstrap.packages.cmJavaPackages[1]: "5\\..*=oracle-j2sdk1.7"

lp.bootstrap.packages.defaultCmJavaPackage. If Altus Director cannot determine the Cloudera Manager version, Altus Director installs the Java package
specified in the defaultCmJavaPackage property.
For example, the following property settings installs Oracle JDK 8 on all Cloudera Manager nodes and CDH clusters:

lp.bootstrap.packages.defaultCmJavaPackage: oracle-j2sdk1.8



By default, Altus Director installs Oracle JDK 8 for Cloudera Manager 6.x and Oracle JDK 7 for Cloudera Manager 5.x on all nodes, as indicated by the default values specified in the
lp.bootstrap.packages.cmJavaPackages and lp.bootstrap.packages.defaultCmJavaPackage properties in the application properties
file.
You can set the lp.bootstrap.packages.cmJavaPackages and lp.bootstrap.packages.defaultCmJavaPackage properties with
the JDK version that you want to install on the Cloudera Manager node and the CDH clusters. For example, if you want to install Oracle JDK 8 on Cloudera Manager and clusters, set cmJavaPackages to .*=oracle-j2sdk1.8 and defaultCmJavaPackage to oracle-j2sdk1.8.
If you want to install OpenJDK, set the properties to the OpenJDK package for the version you want to install. For example, with the following property settings, Altus Director
installs OpenJDK 8 on Cloudera Manager 6.x and CDH clusters. Altus Director installs OpenJDK 7 on Cloudera Manager 5.x and CDH clusters:

lp.bootstrap.packages.cmJavaPackages[0]: "6\\..*=java-1.8.0-openjdk"
lp.bootstrap.packages.cmJavaPackages[1]: "5\\..*=java-1.7.0-openjdk"
You must ensure that yum is configured with a repository that contains the Java package you have chosen, as described below:

If you select oracle-j2sdk1.8 for Cloudera Manager 6.x, then you don't have to do anything further, because Altus Director always configures the Cloudera Manager repository, and the
Cloudera Manager 6 repository has oracle-j2sdk1.8.
If you select oracle-j2sdk1.8 for Cloudera Manager 5.x, then you need to use a bootstrap script or AMI that ensures that the right yum repository is configured. The repository for
Altus Director 2.x has oracle-j2sdk1.7 and oracle-j2sdk1.8.
To install OpenJDK instead of Oracle JDK, ensure that the yum repository contains the OpenJDK Java version that you require.


Here is how the DIRECTOR_MANAGED setting looks in a configuration file:

...
cloudera-manager {

    instance: ${instances.m3x} {
        tags {
            application: "Cloudera Manager 5"
        }
    }
    javaInstallationStrategy: DIRECTOR_MANAGED
    ...
}



NONE JDK Installation Strategy

With the NONE installation strategy, neither Altus Director nor Cloudera Manager installs a JDK. You must manage all JDK installation yourself, for example, by using bootstrap scripts or
pre-baked images.
Here is how this setting looks in a configuration file:
...
cloudera-manager {

    instance: ${instances.m3x} {
        tags {
            application: "Cloudera Manager 5"
        }
    }
    javaInstallationStrategy: NONE
    ...
}


Categories: AWS | Altus Director | Configuring | Installing | All Categories



Auto-Repair for Failed or Terminated Instances


Setting Altus Director Properties


















About Cloudera
Resources
Contact
Careers
Press
Documentation

United States: +1 888 789 1488
Outside the US: +1 650 362 0488



Â© 2019 Cloudera, Inc. All rights reserved. Apache Hadoop and associated open source project names are trademarks of the Apache Software Foundation. For a complete list of trademarks, click here.
If this documentation includes code, including but not limited to, code examples, Cloudera makes this available to you under the terms of the Apache License, Version 2.0, including any required
notices. A copy of the Apache License Version 2.0 can be found here.










Terms & ConditionsÂ  | Â Privacy Policy

Page generated JulyÂ 28,Â 2019.












