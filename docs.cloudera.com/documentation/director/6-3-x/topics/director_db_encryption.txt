



Altus Director Database Encryption | 6.3.x | Cloudera Documentation












































 Documentation


Products
Services & Support
Solutions









Cloudera Altus Director 6.3.x | Other versions





Configuring Storage for Altus Director








View All Categories

Introduction

Displaying Altus Director Documentation
Altus Director Interfaces


Release Notes

New Features and Changes
Known Issues
Fixed Issues
Unsupported Components and Features
Altus Director API


Requirements and Supported Versions
Getting Started

Amazon Web Services (AWS)

Preparing Your AWS EC2 Resources
Launching an EC2 Instance for Altus Director

Choosing an AMI


Installing Altus Director Server and Client on the EC2 Instance
Subscribing to Altus Director in the AWS Marketplace
Configuring a SOCKS Proxy for Amazon EC2
Adding an Altus Director Environment on AWS
Simple Setup: Creating a Cluster on AWS with Default Settings
Advanced Setup: Installing Cloudera Manager and CDH on AWS
Pausing a Cluster on AWS
Cleaning Up Your AWS Deployment
Using Custom DNS in AWS


Google Cloud Platform

Creating a Google Cloud Platform Project
Configuring Tools for Your Google Cloud Platform Account
Creating a Google Compute Engine VM Instance
Installing Altus Director Server and Client on Google Compute Engine
Configuring a SOCKS Proxy for Google Compute Engine
Deploying Cloudera Manager and CDH on Google Compute Engine
Cleaning Up Your Google Cloud Platform Deployment


Microsoft Azure

Obtaining Credentials for Altus Director
Setting up Azure Resources
Setting Up Dynamic DNS on Azure
Setting Up MySQL or PostgreSQL
Setting Up a Virtual Machine for Altus Director Server
Installing Altus Director Server and Client on Azure
Configuring a SOCKS Proxy for Microsoft Azure
Allowing Access to VM Images
Adding an Altus Director Environment on Azure
Simple Setup: Creating an Azure Cluster with Default Settings
Advanced Setup: Installing Cloudera Manager and CDH on Azure
Terminating an Azure Deployment
Adding New VM Images, Custom VM Images, Regions, and Instances
Important Notes About Altus Director and Azure




Usage-Based Billing

Usage Bundles


Using Cloud Provider Regions

Running Altus Director and Cloudera Manager in Different Regions or Clouds
Using a New AWS Region in Altus Director


Configuring Storage for Altus Director

Using MySQL for Altus Director Server
Using MariaDB for Altus Director Server
Altus Director Database Encryption
Migrating the Altus Director Database


Configuring Storage for Cloudera Manager and CDH

Using an External Database for Cloudera Manager and CDH

Defining External Database Servers
Defining External Databases
Using the External Databases for Cloudera SDX


Using Amazon S3 Object Storage


Using EBS Volumes for Cloudera Manager and CDH
Security, Encryption, and High Availability

Enabling TLS with Altus Director
SSH Host Key Retrieval and Verification
Creating Kerberized Clusters With Altus Director
Enabling Sentry Service Authorization
Creating Highly Available Clusters With Altus Director
Encrypted Configuration Properties


Configuring and Running Altus Director

Auto-Repair for Failed or Terminated Instances
Deploying Java on Cluster Instances
Setting Altus Director Properties
Pausing Altus Director Instances
Configuring Altus Director Server for LDAP and Active Directory
Configuring Altus Director for a New AWS Instance Type
Configuring Altus Director to Use Custom Tag Names on AWS


Running Altus Director Behind a Proxy

Configuring Cloudera Manager to Use a Proxy
Configuring Other Software to Use a Proxy
Configuring Altus Director to Use a Proxy
Authenticating Proxies
HTTPS Proxies


Using Altus Director Server to Manage Cloudera Manager Instances

Altus Director and Cloudera Manager Usage
Setting Cloudera Manager Configurations
Ports Used by Altus Director
SSH Keys in Altus Director
Creating AWS Identity and Access Management (IAM) Policies
Using Custom Repositories with Cloudera Manager and CDH
Cloudera Manager Health Information
Opening Cloudera Manager
Diagnostic Data Collection
User Management


Using Altus Director Server to Manage Cluster Instances

The Altus Director Configuration File
Submitting a Cluster Configuration File
Exporting a Configuration File
Deploying Clusters in an Existing Environment
Using Spot Instances
Using Automatic Instance Groups
Using Products outside CDH with Altus Director

Custom Service Descriptors
Using Kudu with CDH 5.12 or Earlier
Using Spark 2 with Altus Director
Using Cloudera Data Science Workbench with Altus Director
Using Third-Party Products with Altus Director


Creating and Modifying Clusters with the Altus Director Web UI
Altus Director Scripts
Terminating a Cluster


Using the Altus Director Client

Installing Altus Director Client
Provisioning a Cluster on AWS
Running Altus Director Client


Upgrading Altus Director
Troubleshooting
FAQ
Altus Director Glossary





To read this documentation, you must turn JavaScript on.




Altus Director Database Encryption

The Altus Director server stores sensitive data in its database, including SSH credentials and cloud provider keys. You can configure Altus Director to encrypt the data stored in the
Altus Director database.
Note: This section discusses data stored in the Altus Director database, not data stored in databases used by Cloudera Manager or CDH cluster
services.



Cipher Configuration

Database encryption is configured by setting the two server configuration properties described in the following table.


Server Configuration Properties


Property
Description




lp.encryption.twoWayCipher
Cipher used to encrypt data. Possible values:

desede - Triple DES (default)
passthrough - No encryption
transitional - Changing encryption




lp.encryption.twoWayCipherConfig
The configuration string for the chosen cipher.




The format of the configuration string varies with the choice of cipher, as described in the table below:


Ciphers and Configuration Strings


Cipher
Configuration String Format




desede
24-byte symmetric encryption key, encoded as a string using Base64


passthrough
ignored


transitional
combination of old cipher and new cipher (see below)




The default value for the configuration string is a fixed 24-byte key for the default triple DES encryption:
ZGVmYXVsdGRpcmVjdG9yZGVzZWRla2V5
Important: Cloudera highly recommends that you configure a different triple DES key. A warning appears in the server log if the default key is
detected.



Starting with Encryption

Altus Director’s default configuration for database encryption encrypts new data stored in the Altus Director database. This default configuration uses triple DES encryption, with a
default key, to protect data. In a new installation of Altus Director, all data needing protection will be encrypted under the default encryption scheme. In an installation that was previously not
configured for encryption, including older releases of Altus Director, new data needing protection will be encrypted, but old data needing protection will remain unencrypted until it is updated in
the database over time.
If this level of protection is sufficient for your needs, it is not necessary to make any changes to Altus Director configuration. While Altus Director will function correctly, keep in
mind that there are drawbacks: some data needing protection in the database might remain unencrypted indefinitely, and data that is encrypted is effectively only obscured, since the default key is
not secret.


Establishing More Secure Encryption for New Installations

For a new installation of Altus Director, Cloudera recommends that you generate and configure your own secret encryption key, different from the default key. Create a new key by
generating 24 bytes of random data from a cryptographically secure random generator, and encode the bytes using the Base64 encoding algorithm.
Here is an example of generating a new key using Python.
python -c 'import base64, os; print base64.b64encode(os.urandom(24))'
Set the Altus Director configuration property lp.encryption.twoWayCipherConfig to the Base64-encoded key string before starting Altus Director for the first time. All
data needing protection in the database will be encrypted with this key. It is good practice to change the encryption key periodically to protect against unintentional disclosure. See Changing Encryption below for more.
Note: If you configure a new secret key, Cloudera recommends you restrict permissions on the configuration file (application.properties) to protect the key from disclosure. Ensure that at least the user running Altus Director can still read the file.



Establishing More Secure Encryption for Existing Installations

For an existing installation of Altus Director that uses either no encryption at all (including older releases of Altus Director) or uses only the default encryption, Cloudera recommends
that you use a transitional cipher to change encryption to a more secure state. Not only will changing encryption introduce the use of a non-default and secret key, but it will also forcibly encrypt
all data needing protection in the database, whether it was already encrypted or not.
See Changing Encryption below for details on how to configure a transitional cipher to change encryption. When
configuring the transitional cipher, you will need to know information about the old cipher that was in effect.

If the default cipher and key was in use previously, then use "desede" and the default key for the old cipher configuration.
If no encryption was in place previously, including older releases of Altus Director which did not support database encryption, then use "passthrough" (with no configuration string)
for the old cipher configuration.


The new cipher should be triple DES ("desede") with a secret key that you generate. See Establishing More Secure
Encryption for New Installations above for details on how to generate a good key.
After establishing more secure encryption, it is good practice to change the encryption key periodically to protect against unintentional disclosure. Use the transitional cipher again to
change encryption to use a new key.




Changing Encryption

To change the key used for database encryption, or change to a different cipher, you must configure the Altus Director server to use a transitional cipher.
Note: Transitional ciphers are supported for Altus Director server only, not for Altus Director client.

If a transitional cipher is configured, Altus Director encrypts all data that needs protection, changing from an old encryption scheme to a new encryption scheme. A transitional cipher
can change the encryption in effect, or introduce it when it has not been used before, including under older Altus Director releases. It also ensures that all data needing protection becomes
encrypted.
To configure a transitional cipher:

Stop the server.
Configure lp.encryption.twoWayCipher with the value transitional.
Configure lp.encryption.twoWayCipherConfig with a configuration string describing both the old cipher and the new cipher.
Start the server.


The configuration string for a transitional cipher has the following format:
old-cipher;old-configuration-string|new-cipher;new-configuration-string
For example, to change the triple DES key, use a configuration string like this:
desede;old-key-in-base64|desede;new-key-in-base64
To transition from the default triple DES encryption key to a new key, use a configuration string like this:
desede;ZGVmYXVsdGRpcmVjdG9yZGVzZWRla2V5|desede;new-key-in-base64
To transition from no encryption to triple DES encryption with a new key, use a configuration string like this:
passthrough;|desede;new-key-in-base64
A transitional cipher cannot be used as the old or new cipher in another transitional cipher.
When the server restarts, it detects that a transitional cipher is configured and updates all relevant data, unencrypted and encrypted, to the new cipher. After this process is complete,
the server continues startup as usual. Configuring a transitional cipher ensures that all data needing protection in the database is encrypted.


Wait for the Server to Complete Ongoing Work

Do not try to change encryption while the server is performer ongoing work. If any work is waiting to be resumed by the server on startup (for example, bootstrapping a new cluster), then
the server will refuse to change encryption and will stop. If this happens, you must configure the server for its old cipher, start it, and wait for that work to resume and be completed.



Changing from a Transitional Cipher to a Normal Cipher

After encryption has been changed using a transitional cipher, you can configure the server to use the new cipher normally.
Example: Assume the configuration string for the transitional cipher was as follows:
desede;old-key-in-base64|desede;new-key-in-base64
One restart of the server will suffice to pick up this change, and then the following configuration string for a normal cipher can be used:
desede;new-key-in-base64
Cloudera recommends that the server be left to run with a transitional cipher only until its next restart or upgrade, and then be reconfigured to use a normal cipher. There are two
reasons for doing this:

While configured with a transitional cipher, the server will not restart if work is waiting to be resumed.
If the server is left configured with a transitional cipher, each time it is restarted the database contents will be re-encrypted using the same key.






Categories: Altus Director | Configuring | Databases | Encryption | Security | All Categories



Using MariaDB for Altus Director Server


Migrating the Altus Director Database


















About Cloudera
Resources
Contact
Careers
Press
Documentation

United States: +1 888 789 1488
Outside the US: +1 650 362 0488



© 2019 Cloudera, Inc. All rights reserved. Apache Hadoop and associated open source project names are trademarks of the Apache Software Foundation. For a complete list of trademarks, click here.
If this documentation includes code, including but not limited to, code examples, Cloudera makes this available to you under the terms of the Apache License, Version 2.0, including any required
notices. A copy of the Apache License Version 2.0 can be found here.










Terms & Conditions  |  Privacy Policy

Page generated July 28, 2019.












