



Defining External Databases | 6.3.x | Cloudera Documentation












































 Documentation


Products
Services & Support
Solutions









Cloudera Altus Director 6.3.x | Other versions





Configuring Storage for Cloudera Manager and CDHUsing an External Database for Cloudera Manager and CDH








View All Categories

Introduction

Displaying Altus Director Documentation
Altus Director Interfaces


Release Notes

New Features and Changes
Known Issues
Fixed Issues
Unsupported Components and Features
Altus Director API


Requirements and Supported Versions
Getting Started

Amazon Web Services (AWS)

Preparing Your AWS EC2 Resources
Launching an EC2 Instance for Altus Director

Choosing an AMI


Installing Altus Director Server and Client on the EC2 Instance
Subscribing to Altus Director in the AWS Marketplace
Configuring a SOCKS Proxy for Amazon EC2
Adding an Altus Director Environment on AWS
Simple Setup: Creating a Cluster on AWS with Default Settings
Advanced Setup: Installing Cloudera Manager and CDH on AWS
Pausing a Cluster on AWS
Cleaning Up Your AWS Deployment
Using Custom DNS in AWS


Google Cloud Platform

Creating a Google Cloud Platform Project
Configuring Tools for Your Google Cloud Platform Account
Creating a Google Compute Engine VM Instance
Installing Altus Director Server and Client on Google Compute Engine
Configuring a SOCKS Proxy for Google Compute Engine
Deploying Cloudera Manager and CDH on Google Compute Engine
Cleaning Up Your Google Cloud Platform Deployment


Microsoft Azure

Obtaining Credentials for Altus Director
Setting up Azure Resources
Setting Up Dynamic DNS on Azure
Setting Up MySQL or PostgreSQL
Setting Up a Virtual Machine for Altus Director Server
Installing Altus Director Server and Client on Azure
Configuring a SOCKS Proxy for Microsoft Azure
Allowing Access to VM Images
Adding an Altus Director Environment on Azure
Simple Setup: Creating an Azure Cluster with Default Settings
Advanced Setup: Installing Cloudera Manager and CDH on Azure
Terminating an Azure Deployment
Adding New VM Images, Custom VM Images, Regions, and Instances
Important Notes About Altus Director and Azure




Usage-Based Billing

Usage Bundles


Using Cloud Provider Regions

Running Altus Director and Cloudera Manager in Different Regions or Clouds
Using a New AWS Region in Altus Director


Configuring Storage for Altus Director

Using MySQL for Altus Director Server
Using MariaDB for Altus Director Server
Altus Director Database Encryption
Migrating the Altus Director Database


Configuring Storage for Cloudera Manager and CDH

Using an External Database for Cloudera Manager and CDH

Defining External Database Servers
Defining External Databases
Using the External Databases for Cloudera SDX


Using Amazon S3 Object Storage


Using EBS Volumes for Cloudera Manager and CDH
Security, Encryption, and High Availability

Enabling TLS with Altus Director
SSH Host Key Retrieval and Verification
Creating Kerberized Clusters With Altus Director
Enabling Sentry Service Authorization
Creating Highly Available Clusters With Altus Director
Encrypted Configuration Properties


Configuring and Running Altus Director

Auto-Repair for Failed or Terminated Instances
Deploying Java on Cluster Instances
Setting Altus Director Properties
Pausing Altus Director Instances
Configuring Altus Director Server for LDAP and Active Directory
Configuring Altus Director for a New AWS Instance Type
Configuring Altus Director to Use Custom Tag Names on AWS


Running Altus Director Behind a Proxy

Configuring Cloudera Manager to Use a Proxy
Configuring Other Software to Use a Proxy
Configuring Altus Director to Use a Proxy
Authenticating Proxies
HTTPS Proxies


Using Altus Director Server to Manage Cloudera Manager Instances

Altus Director and Cloudera Manager Usage
Setting Cloudera Manager Configurations
Ports Used by Altus Director
SSH Keys in Altus Director
Creating AWS Identity and Access Management (IAM) Policies
Using Custom Repositories with Cloudera Manager and CDH
Cloudera Manager Health Information
Opening Cloudera Manager
Diagnostic Data Collection
User Management


Using Altus Director Server to Manage Cluster Instances

The Altus Director Configuration File
Submitting a Cluster Configuration File
Exporting a Configuration File
Deploying Clusters in an Existing Environment
Using Spot Instances
Using Automatic Instance Groups
Using Products outside CDH with Altus Director

Custom Service Descriptors
Using Kudu with CDH 5.12 or Earlier
Using Spark 2 with Altus Director
Using Cloudera Data Science Workbench with Altus Director
Using Third-Party Products with Altus Director


Creating and Modifying Clusters with the Altus Director Web UI
Altus Director Scripts
Terminating a Cluster


Using the Altus Director Client

Installing Altus Director Client
Provisioning a Cluster on AWS
Running Altus Director Client


Upgrading Altus Director
Troubleshooting
FAQ
Altus Director Glossary





To read this documentation, you must turn JavaScript on.




Defining External Databases


After external database servers are defined, the databases on them can be defined. Altus Director can use databases that already exist on those servers, or it can create them while
bootstrapping new Cloudera Manager instances or CDH clusters.
The following parts of an existing database must be defined:

type - The type of database, “MYSQL” or “POSTGRESQL.”
hostname - The name of the server host.
port - The listening port of the server.
name - The name of the database on the server.
username - The name of the user account having full access to the database.
password - The password for the user account.

The parts of an external database template are:

name - A unique name for the template within the deployment or cluster template.
databaseServerName - The name of the external database server where the new database is to reside.
databaseNamePrefix - The string prefix for the name of the new database server.
usernamePrefix - The string prefix for the name of the new user account that will have full access to the database.

The database server name in a database server template must refer to an external database server that is already defined.
When Altus Director creates the new database, it names the database by starting with the prefix in the template and then appends a random string. This prevents name duplication issues
when sharing a database server across many deployments and clusters. Likewise, Altus Director creates new user accounts by starting with the prefix in the template and appending a random string.
Important: If you are using a MySQL database, the usernamePrefix you define should be no more than seven
characters long. This keeps usernames generated by Altus Director within the MySQL limit of sixteen characters for usernames.

If Altus Director creates new external databases during the bootstrap of a deployment or cluster, then it also drops them, and their associated user accounts, when terminating the
deployment or cluster. Be sure to back up those databases before beginning termination.
Note: Altus Director cannot create databases on remote database servers that Altus Director (or code that it runs) is unable to reach. For example,
Altus Director cannot work with a database server that only allows local access, unless that server happens to be on the same machine as Altus Director. Use the following workarounds:

Reconfigure the database server, and any security measures that apply to it, to allow Altus Director access during the bootstrap and termination processes.
Open an SSH tunnel for database server access.
Create the databases manually and configure them using normal Altus Director support for external databases.




API
Define external databases in the templates for new Cloudera Manager installations (“deployments”) or new clusters. You cannot define both existing databases, and new databases that need
to be created, in the same template.


Defining External Databases in the Configuration File
External Databases for Cloudera Manager
Define external databases used by Cloudera Manager in the cloudera-manager section of a configuration file. The following example defines existing external
databases, indicated by the fact that it includes values for the hostnames or IP addresses and the ports.
cloudera-manager {
   # ...
   databases {
      CLOUDERA_MANAGER {
         name: scm1
         type: mysql
         host: 1.2.3.4
         port: 3306
         user: scmuser
         password: scmpassword
      }
      ACTIVITYMONITOR {
         name: am1
         type: mysql
         host: 1.2.3.4
         port: 3306
         user: amuser
         password: ampassword
      }
      REPORTSMANAGER {
         name: rm1
         type: mysql
         host: 1.2.3.4
         port: 3306
         user: rmuser
         password: rmpassword
      }
      NAVIGATOR {
         name: nav1
         type: mysql
         host: 1.2.3.4
         port: 3306
         user: navuser
         password: navpassword
      }
      NAVIGATORMETASERVER {
         name: navmeta1
         type: mysql
         host: 1.2.3.4
         port: 3306
         user: navmetauser
         password: navmetapassword
      }
   }
The following example, which does not include hostnames or IP addresses and ports, defines new external databases that Altus Director must create while bootstrapping the deployment.
cloudera-manager {
   # ... 
   databaseTemplates { 
      CLOUDERA_MANAGER { 
         name: cmtemplate 
         databaseServerName: mysql1 
         databaseNamePrefix: scm 
         usernamePrefix: cmadmin 
      } 
      ACTIVITYMONITOR {
         name: cmamtemplate 
         databaseServerName: mysql1 
         databaseNamePrefix: am 
         usernamePrefix: cmamadmin 
      } 
      REPORTSMANAGER {
         name: cmrmtemplate 
         databaseServerName: mysql1 
         databaseNamePrefix: rm 
         usernamePrefix: cmrmadmin 
      } 
      NAVIGATOR { 
         name: cmnavtemplate 
         databaseServerName: mysql1 
         databaseNamePrefix: nav 
         user: cmnavadmin 
      } 
      NAVIGATORMETASERVER {
         name: cmnavmetatemplate 
         databaseServerName: mysql1 
         databaseNamePrefix: navmeta 
         usernamePrefix: cmnavmetaadmin 
      } 
   } 
Each template must refer to a database server defined elsewhere in the configuration file. The database server template can be for a server that does not yet exist; in that case, Altus
Director starts creating the server, and then waits while bootstrapping the deployment until the server is available.
A deployment must use either all existing databases or all non-existing databases for the different Cloudera Manager components; they cannot be mixed.
For CDH Services
Define external databases used by cluster services such as Hive in the cluster section of a configuration file. The following example defines existing
external databases.
cluster {
   #...
   databases: {
      HIVE {
         name: hive1
         type: mysql
         host: 1.2.3.4
         port: 3306
         user: hiveuser
         password: hivepassword
      }
   }

The following example defines new external databases that Altus Director must create while bootstrapping the cluster.
cluster {
   #... 
   databaseTemplates: {
      HIVE {
      name: hivetemplate 
      databaseServerName: mysql1 
      databaseNamePrefix: hivemetastore 
      usernamePrefix: hive 
   } 
}
Each template must refer to a database server defined elsewhere in the configuration file. The database server template can be for a server that does not yet exist; in that case, Altus
Director starts creating the server, and then waits while bootstrapping the cluster until the server is available.
A deployment must use either all existing databases or all non-existing databases for the different cluster services; they cannot be mixed.



Categories: Altus Director | Cloudera Manager | Configuring | Databases | All Categories



Defining External Database Servers


Using the External Databases for Cloudera
SDX


















About Cloudera
Resources
Contact
Careers
Press
Documentation

United States: +1 888 789 1488
Outside the US: +1 650 362 0488



© 2019 Cloudera, Inc. All rights reserved. Apache Hadoop and associated open source project names are trademarks of the Apache Software Foundation. For a complete list of trademarks, click here.
If this documentation includes code, including but not limited to, code examples, Cloudera makes this available to you under the terms of the Apache License, Version 2.0, including any required
notices. A copy of the Apache License Version 2.0 can be found here.










Terms & Conditions  |  Privacy Policy

Page generated July 28, 2019.












