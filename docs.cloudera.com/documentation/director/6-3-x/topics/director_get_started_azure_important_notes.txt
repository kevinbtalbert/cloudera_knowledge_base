



Important Notes About Altus Director and Azure | 6.3.x | Cloudera Documentation









































 Documentation


Products
Services & Support
Solutions









Cloudera Altus DirectorÂ 6.3.x | Other versions





Getting
StartedMicrosoft Azure








View All Categories

Introduction

Displaying Altus Director Documentation
Altus Director Interfaces


Release Notes

New Features and Changes
Known Issues
Fixed Issues
Unsupported Components and Features
Altus Director API


Requirements and Supported Versions
Getting Started

Amazon Web Services (AWS)

Preparing Your AWS EC2 Resources
Launching an EC2 Instance for Altus Director

Choosing an AMI


Installing Altus Director Server and Client on the EC2 Instance
Subscribing to Altus Director in the AWS Marketplace
Configuring a SOCKS Proxy for Amazon EC2
Adding an Altus Director Environment on AWS
Simple Setup: Creating a Cluster on AWS with Default Settings
Advanced Setup: Installing Cloudera Manager and CDH on AWS
Pausing a Cluster on AWS
Cleaning Up Your AWS Deployment
Using Custom DNS in AWS


Google Cloud Platform

Creating a Google Cloud Platform Project
Configuring Tools for Your Google Cloud Platform Account
Creating a Google Compute Engine VM Instance
Installing Altus Director Server and Client on Google Compute Engine
Configuring a SOCKS Proxy for Google Compute Engine
Deploying Cloudera Manager and CDH on Google Compute Engine
Cleaning Up Your Google Cloud Platform Deployment


Microsoft Azure

Obtaining Credentials for Altus Director
Setting up Azure Resources
Setting Up Dynamic DNS on Azure
Setting Up MySQL or PostgreSQL
Setting Up a Virtual Machine for Altus Director Server
Installing Altus Director Server and Client on Azure
Configuring a SOCKS Proxy for Microsoft Azure
Allowing Access to VM Images
Adding an Altus Director Environment on Azure
Simple Setup: Creating an Azure Cluster with Default Settings
Advanced Setup: Installing Cloudera Manager and CDH on Azure
Terminating an Azure Deployment
Adding New VM Images, Custom VM Images, Regions, and Instances
Important Notes About Altus Director and Azure




Usage-Based Billing

Usage Bundles


Using Cloud Provider Regions

Running Altus Director and Cloudera Manager in Different Regions or Clouds
Using a New AWS Region in Altus Director


Configuring Storage for Altus Director

Using MySQL for Altus Director Server
Using MariaDB for Altus Director Server
Altus Director Database Encryption
Migrating the Altus Director Database


Configuring Storage for Cloudera Manager and CDH

Using an External Database for Cloudera Manager and CDH

Defining External Database Servers
Defining External Databases
Using the External Databases for Cloudera SDX


Using Amazon S3 Object Storage


Using EBS Volumes for Cloudera Manager and CDH
Security, Encryption, and High Availability

Enabling TLS with Altus Director
SSH Host Key Retrieval and Verification
Creating Kerberized Clusters With Altus Director
Enabling Sentry Service Authorization
Creating Highly Available Clusters With Altus Director
Encrypted Configuration Properties


Configuring and Running Altus Director

Auto-Repair for Failed or Terminated Instances
Deploying Java on Cluster Instances
Setting Altus Director Properties
Pausing Altus Director Instances
Configuring Altus Director Server for LDAP and Active Directory
Configuring Altus Director for a New AWS Instance Type
Configuring Altus Director to Use Custom Tag Names on AWS


Running Altus Director Behind a Proxy

Configuring Cloudera Manager to Use a Proxy
Configuring Other Software to Use a Proxy
Configuring Altus Director to Use a Proxy
Authenticating Proxies
HTTPS Proxies


Using Altus Director Server to Manage Cloudera Manager Instances

Altus Director and Cloudera Manager Usage
Setting Cloudera Manager Configurations
Ports Used by Altus Director
SSH Keys in Altus Director
Creating AWS Identity and Access Management (IAM) Policies
Using Custom Repositories with Cloudera Manager and CDH
Cloudera Manager Health Information
Opening Cloudera Manager
Diagnostic Data Collection
User Management


Using Altus Director Server to Manage Cluster Instances

The Altus Director Configuration File
Submitting a Cluster Configuration File
Exporting a Configuration File
Deploying Clusters in an Existing Environment
Using Spot Instances
Using Automatic Instance Groups
Using Products outside CDH with Altus Director

Custom Service Descriptors
Using Kudu with CDH 5.12 or Earlier
Using Spark 2 with Altus Director
Using Cloudera Data Science Workbench with Altus Director
Using Third-Party Products with Altus Director


Creating and Modifying Clusters with the Altus Director Web UI
Altus Director Scripts
Terminating a Cluster


Using the Altus Director Client

Installing Altus Director Client
Provisioning a Cluster on AWS
Running Altus Director Client


Upgrading Altus Director
Troubleshooting
FAQ
Altus Director Glossary





To read this documentation, you must turn JavaScript on.




Important Notes About Altus Director and Azure

Azure Limits, Quotas, and Constraints

Azure limits the number of CPU cores that can be allocated in each region. For details, see Azure subscription and service limits, quotas, and constraints in the Azure documentation. If you need
to increase the limit, contact Microsoft Azure support before deploying the cluster with Altus Director.
Not all Azure Virtual Machine (VM) types are available in all Azure regions. See Products
available by region on the Microsoft Azure web site to confirm that a VM type is available in a particular region. See Cloudera Reference Architecture for Microsoft Azure Deployments for the latest
supported VM types.



Azure Resources Managed by Altus Director

The Azure plug-in for Altus Director creates the following resources:

Managed disks and storage accounts:

For VMs using unmanaged disks in storage accounts: one storage account for each VM.
For VMs using managed disks: one managed disk for each data disk, and one managed disk for the OS disk.


A NIC for each VM.
A public IP address for each VM, if public IP addresses are enabled.





Deploying Production Clusters

Although the Altus Director web UI can be used for proof-of-concept deployments on Azure, you must use the published sample configuration files for production deployments (see Useful Links below). You can modify the sample configuration file to fit your specific deployment environment,
remove services you do not need, and customize the sample bootstrap script. Configurations related to logging and data storage for individual services must not be changed. Deploying a cluster using
the Altus Director command-line interface and configuration file based on the examples ensures a repeatable deployment with the proper settings for Azure.
See the Cloudera Reference
Architecture for Microsoft Azure Deployments document for more details.



Updating the Azure Plug-in Timeout Value

Azure backend operations usually complete in a few minutes, but in rare cases they take longer, sometimes up to an hour. This can cause Altus Director operations such as allocate to fail prematurely. If this happens, you might want to increase the backend polling timeout value in the azure-plugin.conf file.

Download the latest supported azure-plugin.conf file from the Altus Director scripts repository.
Find the parameter azure-backend-operation-polling-timeout-second in the provider section.
Change the value to the required duration in seconds.
On the Altus Director server, copy the modified azure-plugin.conf to /var/lib/cloudera-director-plugins/azure-provider-x.x.x/etc/azure-plugin.conf (replacing x.x.x with the latest version), and then restart Altus Director with sudo service
cloudera-director-server restart

This procedure changes only the Azure plug-in timeout. The following Altus Director timeout values must also be increased in the server's application.properties file to
be at least as large as the Azure plug-in configuration values:

lp.cloud.databaseServers.allocate.timeoutInMinutes
lp.cloud.instances.terminate.timeoutInMinutes

See Setting Altus Director Properties for information on setting configuration properties in the server's application.properties file.



Deletion Behavior

The deletion behavior is as follows:

The storage used for the VM OS disk and cluster data disks.
The NIC created by the plug-in is attached to the VM. Only one NIC is used per VM. Do not manually attach NICs to the VM created by the plug-in.
If the VM was set up to have a public IP, Altus Director will delete it. If a public IP was attached manually after the VM was created, Altus Director will not delete it.


Important: Based on the deletion behaviors described, do not reuse any resources created by the Azure plug-in for any other purpose.



Updating an Expired Azure Client Secret

The Azure client secret is a necessary part of Microsoft Azure security. Altus Director uses the combination of your Azure Active Directory application tenant ID, client ID, and client
secret to authenticate, and thereby perform actions against Azure.
Note: For more information, see Use portal to create an Azure Active Directory application and service
principal that can access resources.

If your client secret expires, you will get an error in the Altus Director UI similar to the following:



An expired client secret also results in an entry similar to the following in the Altus Director log file:

Failed to authenticate with Azure: java.io.IOException:
com.cloudera.director.azure.shaded.com.microsoft.aad.adal4j.AuthenticationException:
{"error":"invalid_client","error_description":"AADSTS70002: Error validating
credentials. AADSTS50012: Invalid client secret is provided.\r\nTrace ID:
fc5529da-2536-44f6-bad4-d07f6a9bbd00\r\nCorrelation ID:
1e7f12f3-32e7-4635-8b27-197e53fd0ab8\r\nTimestamp: 2018-05-31
11:13:11Z"}


Steps to Update an Expired Client Secret

To update an expired client secret, perform the following steps for each environment that uses the expired secret.
Note: This procedure works for Altus Director 2.6 and higher. If you are using a lower version of Altus Director, contact Cloudera Support for
assistance.

Turn off credential validation.

ssh to the Altus Director server host.
Locate the Azure plugin configuration file if you have one, or create a new plugin configuration file.
Note: Whether an Azure plugin configuration file exists on your system will depend on how Altus Director was initially installed and whether any
plugin configuration settings have already been changed.

If you already have a configuration file, it will be located at /var/lib/cloudera-director-plugins/azure-provider-version/etc/azure-plugin.conf.
If there is no azure-plugin.conf file at that location, create one by running the following command:
wget -O /var/lib/cloudera-director-plugins/azure-provider-version/etc/azure-plugin.conf
https://raw.githubusercontent.com/cloudera/director-scripts/master/azure-plugin-config/azure-plugin.conf


Edit the azure-plugin.conf file. Towards the end of the file thereâs an azure-validate-credentials field. Change the value
to false:
azure-validate-credentials: false


Restart Altus Director:
sudo service cloudera-director-server restart
Update the credentials in either of the following ways:

Using the Altus Director UI:

Log into Altus Director and go to the environment whose client secret has expired.
From the Add Cloudera Manager dropdown menu, select Update Environment Credentials.
Put in the new client secret along with your existing settings for this environment. Existing environment settings can be found under the Details
tab.


Using the Altus Director API:

Log into Altus Director. (You must be authenticated to use the Altus Director API.)
Go the the environments section of the API console of your Altus Director server (replace director-server-hostname with
your own):
http://director-server-hostname:7189/api-console/index.html#
Click on the GET /api/v11/environments section, and click Try it out! to list the environments. If you are using a version
of the API other than v11, this procedure will still work, but your URL will contain the version you are using in place of v11.
Copy the name of the environment whose client secret has expired. Open the GET /api/v11/environments/{name} section and paste the environment name into
the name parameter box, and click Try it out! to display the environment details.
Copy the config portion of the JSON block including the curly braces but excluding the "config" string. It should similar
to the example below. You might have different fields and values, but clientSecret should be there. If the clientSecret field is not there,
check to be sure you are using the correct API.
{
    "tenantId": "[...]",
    "region": "eastus2",
    "azureCloudEnvironment": "azure",
    "clientSecret": "REDACTED",
    "subscriptionId": "[...]",
    "clientId": "[...]"
}

Open the PUT /api/v11/environments/{name}/provider/credentials section. Note that there is /provider/credentials in the
path - it is NOT the PUT /api/v11/environments/{name} section.
Paste in the whole JSON block, including all fields and the surrounding curly braces, and then edit the JSON block:


Remove the "region" line.


Replace the "REDACTED" portion of "clientSecret": "REDACTED" with your new client secret.



Click Try it out! again to update the credentials. On success, you should get a 202 response code. If you get a
400 Bad Request, check the Altus Director logs for full details. Also, check that you have not made any of the following common mistakes:


a. Using PUT /api/v11/environments/{name} instead of PUT /api/v11/environments/{name}/provider/credentials (note the
/provider/credentials in the path).
This causes the following response:
   "status": 400,
   "error": "Bad Request",
   "exception":
"org.springframework.http.converter.HttpMessageNotReadableException",
   "message": "Bad Request"



b. Improperly formatted JSON. This causes the following response:
   "status": 400,
   "error": "Bad Request",
   "exception":
"org.springframework.http.converter.HttpMessageNotReadableException",
   "message": "Bad Request"


c. Forgetting to remove the "region" line. This causes the following response:
   "status": 400,
   "error": "Bad Request",
   "exception":
"com.cloudera.launchpad.api.common.EnvironmentsResource$UnsupportedEnvironmentUpdateException",
   "message": "Unsupported environment update request"







Turn on credential validation. In this step, you undo what you did in the beginning:

If you did not have an azure-plugin.conf file initially, delete the file now.
If there was a file initially, then change azure-validate-credentials in your azure-plugin.conf back to true:
azure-validate-credentials: true


Restart Altus Director:
sudo service cloudera-director-server restart
Verify the fix.

Tail the logs on the Altus Director host:
tail -f /var/log/cloudera-director-server/application.log
Log into the Altus Director UI and go to the environment whose client secret was previously expired.
If there are no errors with credential validation in the Altus Director UI or in the logs, then the new client secret has been applied.




If you see the following message in the logs after restarting Altus Director, credential validation is still turned off (azure-validate-credentials:
false):
Skipping Azure credential validation with Azure backend.
Verify that everything was changed back correctly, and that Altus Director was restarted.




Useful Links



Cloudera Enterprise Reference Architecture for
Azure Deployments.
Configuration files for running Altus Director on Microsoft Azure:

azure.simple.conf: A simple Altus Director configuration
that creates a Cloudera Manager node and a four-node cluster (one master and three workers).
azure.reference.conf: A reference Altus Director
configuration that creates an eight-node cluster (three masters and five workers) with high availability (HA) enabled.
azure.kerberos.conf: The same Altus Director
configuration as azure.reference.conf, but with Kerberos enabled.







Categories: Altus Director | Azure | Configuring | All Categories



Adding New VM Images, Custom VM Images, Regions, and Instances


Usage-Based Billing


















About Cloudera
Resources
Contact
Careers
Press
Documentation

United States: +1 888 789 1488
Outside the US: +1 650 362 0488



Â© 2019 Cloudera, Inc. All rights reserved. Apache Hadoop and associated open source project names are trademarks of the Apache Software Foundation. For a complete list of trademarks, click here.
If this documentation includes code, including but not limited to, code examples, Cloudera makes this available to you under the terms of the Apache License, Version 2.0, including any required
notices. A copy of the Apache License Version 2.0 can be found here.










Terms & ConditionsÂ  | Â Privacy Policy

Page generated JulyÂ 28,Â 2019.












