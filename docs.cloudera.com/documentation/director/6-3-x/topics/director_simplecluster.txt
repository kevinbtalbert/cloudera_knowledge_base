



Simple Setup: Creating a Cluster on AWS with Default Settings | 6.3.x | Cloudera Documentation









































 Documentation


Products
Services & Support
Solutions









Cloudera Altus DirectorÂ 6.3.x | Other versions





Getting
StartedAmazon Web Services (AWS)








View All Categories

Introduction

Displaying Altus Director Documentation
Altus Director Interfaces


Release Notes

New Features and Changes
Known Issues
Fixed Issues
Unsupported Components and Features
Altus Director API


Requirements and Supported Versions
Getting Started

Amazon Web Services (AWS)

Preparing Your AWS EC2 Resources
Launching an EC2 Instance for Altus Director

Choosing an AMI


Installing Altus Director Server and Client on the EC2 Instance
Subscribing to Altus Director in the AWS Marketplace
Configuring a SOCKS Proxy for Amazon EC2
Adding an Altus Director Environment on AWS
Simple Setup: Creating a Cluster on AWS with Default Settings
Advanced Setup: Installing Cloudera Manager and CDH on AWS
Pausing a Cluster on AWS
Cleaning Up Your AWS Deployment
Using Custom DNS in AWS


Google Cloud Platform

Creating a Google Cloud Platform Project
Configuring Tools for Your Google Cloud Platform Account
Creating a Google Compute Engine VM Instance
Installing Altus Director Server and Client on Google Compute Engine
Configuring a SOCKS Proxy for Google Compute Engine
Deploying Cloudera Manager and CDH on Google Compute Engine
Cleaning Up Your Google Cloud Platform Deployment


Microsoft Azure

Obtaining Credentials for Altus Director
Setting up Azure Resources
Setting Up Dynamic DNS on Azure
Setting Up MySQL or PostgreSQL
Setting Up a Virtual Machine for Altus Director Server
Installing Altus Director Server and Client on Azure
Configuring a SOCKS Proxy for Microsoft Azure
Allowing Access to VM Images
Adding an Altus Director Environment on Azure
Simple Setup: Creating an Azure Cluster with Default Settings
Advanced Setup: Installing Cloudera Manager and CDH on Azure
Terminating an Azure Deployment
Adding New VM Images, Custom VM Images, Regions, and Instances
Important Notes About Altus Director and Azure




Usage-Based Billing

Usage Bundles


Using Cloud Provider Regions

Running Altus Director and Cloudera Manager in Different Regions or Clouds
Using a New AWS Region in Altus Director


Configuring Storage for Altus Director

Using MySQL for Altus Director Server
Using MariaDB for Altus Director Server
Altus Director Database Encryption
Migrating the Altus Director Database


Configuring Storage for Cloudera Manager and CDH

Using an External Database for Cloudera Manager and CDH

Defining External Database Servers
Defining External Databases
Using the External Databases for Cloudera SDX


Using Amazon S3 Object Storage


Using EBS Volumes for Cloudera Manager and CDH
Security, Encryption, and High Availability

Enabling TLS with Altus Director
SSH Host Key Retrieval and Verification
Creating Kerberized Clusters With Altus Director
Enabling Sentry Service Authorization
Creating Highly Available Clusters With Altus Director
Encrypted Configuration Properties


Configuring and Running Altus Director

Auto-Repair for Failed or Terminated Instances
Deploying Java on Cluster Instances
Setting Altus Director Properties
Pausing Altus Director Instances
Configuring Altus Director Server for LDAP and Active Directory
Configuring Altus Director for a New AWS Instance Type
Configuring Altus Director to Use Custom Tag Names on AWS


Running Altus Director Behind a Proxy

Configuring Cloudera Manager to Use a Proxy
Configuring Other Software to Use a Proxy
Configuring Altus Director to Use a Proxy
Authenticating Proxies
HTTPS Proxies


Using Altus Director Server to Manage Cloudera Manager Instances

Altus Director and Cloudera Manager Usage
Setting Cloudera Manager Configurations
Ports Used by Altus Director
SSH Keys in Altus Director
Creating AWS Identity and Access Management (IAM) Policies
Using Custom Repositories with Cloudera Manager and CDH
Cloudera Manager Health Information
Opening Cloudera Manager
Diagnostic Data Collection
User Management


Using Altus Director Server to Manage Cluster Instances

The Altus Director Configuration File
Submitting a Cluster Configuration File
Exporting a Configuration File
Deploying Clusters in an Existing Environment
Using Spot Instances
Using Automatic Instance Groups
Using Products outside CDH with Altus Director

Custom Service Descriptors
Using Kudu with CDH 5.12 or Earlier
Using Spark 2 with Altus Director
Using Cloudera Data Science Workbench with Altus Director
Using Third-Party Products with Altus Director


Creating and Modifying Clusters with the Altus Director Web UI
Altus Director Scripts
Terminating a Cluster


Using the Altus Director Client

Installing Altus Director Client
Provisioning a Cluster on AWS
Running Altus Director Client


Upgrading Altus Director
Troubleshooting
FAQ
Altus Director Glossary





To read this documentation, you must turn JavaScript on.




Simple Setup: Creating a Cluster on AWS with Default Settings

The simple setup procedure provides the simplest and most reliable way to get a Cloudera Manager deployment and CDH cluster up and running quickly when you do not require custom
configurations or advanced features, like Kerberos, TLS, or external databases. To bootstrap a new cluster, you need only provide some information about your cloud provider of choice, and about the
type of cluster you want to create. All of the other details about how your cluster is configured, like its topology and versions of Cloudera Manager and CDH, are determined for you by Altus
Director.
Simple setup clusters are not recommended as production clusters. But a good strategy for creating a production cluster is to export a client configuration file for a simple setup
cluster, and then edit that configuration file to add more advanced features. In this way, you simplify the task of creating a custom cluster, beginning from a known working configuration, rather
than starting from the more complete, but more complex aws.reference.conf file. You can export a client configuration file through the web UI or through the server API. For more information, see Exporting a Configuration File.


Type of Simple Setup Clusters

Choose from five different types of cluster with Simple Setup, based on the workloads you will run in the cluster. The workload type you choose determines the services in the cluster.

Basic: Provides a simple Hadoop environment. Includes Hive and MapReduce.
Data Engineering: For Spark workloads and ETL jobs. Includes Hive and Spark.
Analytic Database: For business intelligence and SQL analytics. Includes Impala and Hive.
Operational Database: For NoSQL real-time application serving. Includes HBase.
Enterprise Data Hub: Provides a comprehensive range of services for the Cloudera platform.





Ways to Create a Simple Setup Cluster

There are several ways to create a cluster with the simple setup procedure:

Use the Altus Director UI, and click the tile Simple Setup at the conclusion of the Add Environment procedure, or navigate
to an existing environment and clicking the Add Cluster button.
Use the Altus Director CLI and the bootstrap-remote command with a configuration file. You can define a simple client configuration file with the same
environment and cluster information that you would supply through the web user interface. For a sample configuration file, including instructions for creating a cluster, see aws.simple_setup.conf on the Cloudera GitHub site.
Submit JSON or HOCON input to the Altus Director API import endpoint. For details, see importClientConfig in the Altus Director API console at
director_ip_address:port/api-console/index.html.





Launching a Simple Setup Cluster with the Altus Director UI

To launch a cluster using the simple setup procedure with the Altus Director UI, perform the following steps:

Add a Altus Director environment, as described in Adding an Altus Director Environment on AWS.
Begin the simple setup cluster installation in one of the following ways:

Click the Simple Setup tile at the conclusion of the Add Environment procedure.
Navigate to an existing environment and click the Add Cluster button.


Provide values for the fields on the Add Cluster screen:

Cluster name: Between 2 and 40 alphanumeric characters. Space, underscore, and hyphen are allowed except at the beginning or end of the name. EC2
instances for the cluster nodes are prefixed with the cluster name.
Workload Type: Select the typical workload that this cluster will run on from the drop-down list. The workload type is used to determine the services that
run inside the cluster.
Worker Node Instance Type: m4.xlarge or larger is recommended.
Worker Node Count: Number of cluster nodes for worker roles.
Security group IDs: Specify a list of one or more security group IDs. Must begin with sg-.
VPC subnet ID: The AWS virtual private cloud (VPC) subnet ID.


Click Continue to launch the cluster.

If you launch additional clusters with the simple setup procedure using the same Altus Director environment, the fields on the Add Cluster screen for Worker Node
Instance Type, Worker Node Count, Security Group IDs, and VPC subnet ID will be pre-populated with the values you used for your previous simple setup cluster.



Converting a Configuration File from Simple to Standard Format

When you launch a cluster using the Altus Director CLI and the bootstrap-remote command with a simple configuration file, your configuration file is
automatically converted from a simple cluster configuration file to a standard one. If you want to see your configuration file converted from simple to standard format before you have used it, run
the CLI command convert-remote.
Note: For security reasons, some fields in the converted configuration file will be redacted. Values for the redacted fields must be provided in
order to use the configuration file:

Cloud provider credentials
SSH private key
Any database passwords

Replace the sections REDACTED and ---BEGIN RSA PRIVATE KEY--- with actual values to make the converted configuration file usable.

The default name for files created with the convert-remote command is director.out. Use the lp.cli.file.outputFilename property if you want to give the output file a different name. You can do this in the CLI application.properties file
(/etc/cloudera-director-client/application.properties on the Altus Director instance). Another way is to pass your desired file name on the command line with the
convert-remote command:
cloudera-director convert-remote simple.conf \
  --lp.cli.file.outputFilename=myoutputfilename.conf \
  --lp.remote.username=admin --lp.remote.password=admin
This method enables you to provide a different file name each time you convert a configuration file from simple to standard format.



Categories: Altus Director | Configuring | Getting Started | All Categories



Adding an Altus Director Environment on AWS


Advanced Setup: Installing Cloudera Manager
and CDH on AWS


















About Cloudera
Resources
Contact
Careers
Press
Documentation

United States: +1 888 789 1488
Outside the US: +1 650 362 0488



Â© 2019 Cloudera, Inc. All rights reserved. Apache Hadoop and associated open source project names are trademarks of the Apache Software Foundation. For a complete list of trademarks, click here.
If this documentation includes code, including but not limited to, code examples, Cloudera makes this available to you under the terms of the Apache License, Version 2.0, including any required
notices. A copy of the Apache License Version 2.0 can be found here.










Terms & ConditionsÂ  | Â Privacy Policy

Page generated JulyÂ 28,Â 2019.












