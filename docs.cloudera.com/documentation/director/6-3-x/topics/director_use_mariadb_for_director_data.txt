



Using MariaDB for Altus Director Server | 6.3.x | Cloudera Documentation












































 Documentation


Products
Services & Support
Solutions









Cloudera Altus DirectorÂ 6.3.x | Other versions





Configuring Storage for Altus Director








View All Categories

Introduction

Displaying Altus Director Documentation
Altus Director Interfaces


Release Notes

New Features and Changes
Known Issues
Fixed Issues
Unsupported Components and Features
Altus Director API


Requirements and Supported Versions
Getting Started

Amazon Web Services (AWS)

Preparing Your AWS EC2 Resources
Launching an EC2 Instance for Altus Director

Choosing an AMI


Installing Altus Director Server and Client on the EC2 Instance
Subscribing to Altus Director in the AWS Marketplace
Configuring a SOCKS Proxy for Amazon EC2
Adding an Altus Director Environment on AWS
Simple Setup: Creating a Cluster on AWS with Default Settings
Advanced Setup: Installing Cloudera Manager and CDH on AWS
Pausing a Cluster on AWS
Cleaning Up Your AWS Deployment
Using Custom DNS in AWS


Google Cloud Platform

Creating a Google Cloud Platform Project
Configuring Tools for Your Google Cloud Platform Account
Creating a Google Compute Engine VM Instance
Installing Altus Director Server and Client on Google Compute Engine
Configuring a SOCKS Proxy for Google Compute Engine
Deploying Cloudera Manager and CDH on Google Compute Engine
Cleaning Up Your Google Cloud Platform Deployment


Microsoft Azure

Obtaining Credentials for Altus Director
Setting up Azure Resources
Setting Up Dynamic DNS on Azure
Setting Up MySQL or PostgreSQL
Setting Up a Virtual Machine for Altus Director Server
Installing Altus Director Server and Client on Azure
Configuring a SOCKS Proxy for Microsoft Azure
Allowing Access to VM Images
Adding an Altus Director Environment on Azure
Simple Setup: Creating an Azure Cluster with Default Settings
Advanced Setup: Installing Cloudera Manager and CDH on Azure
Terminating an Azure Deployment
Adding New VM Images, Custom VM Images, Regions, and Instances
Important Notes About Altus Director and Azure




Usage-Based Billing

Usage Bundles


Using Cloud Provider Regions

Running Altus Director and Cloudera Manager in Different Regions or Clouds
Using a New AWS Region in Altus Director


Configuring Storage for Altus Director

Using MySQL for Altus Director Server
Using MariaDB for Altus Director Server
Altus Director Database Encryption
Migrating the Altus Director Database


Configuring Storage for Cloudera Manager and CDH

Using an External Database for Cloudera Manager and CDH

Defining External Database Servers
Defining External Databases
Using the External Databases for Cloudera SDX


Using Amazon S3 Object Storage


Using EBS Volumes for Cloudera Manager and CDH
Security, Encryption, and High Availability

Enabling TLS with Altus Director
SSH Host Key Retrieval and Verification
Creating Kerberized Clusters With Altus Director
Enabling Sentry Service Authorization
Creating Highly Available Clusters With Altus Director
Encrypted Configuration Properties


Configuring and Running Altus Director

Auto-Repair for Failed or Terminated Instances
Deploying Java on Cluster Instances
Setting Altus Director Properties
Pausing Altus Director Instances
Configuring Altus Director Server for LDAP and Active Directory
Configuring Altus Director for a New AWS Instance Type
Configuring Altus Director to Use Custom Tag Names on AWS


Running Altus Director Behind a Proxy

Configuring Cloudera Manager to Use a Proxy
Configuring Other Software to Use a Proxy
Configuring Altus Director to Use a Proxy
Authenticating Proxies
HTTPS Proxies


Using Altus Director Server to Manage Cloudera Manager Instances

Altus Director and Cloudera Manager Usage
Setting Cloudera Manager Configurations
Ports Used by Altus Director
SSH Keys in Altus Director
Creating AWS Identity and Access Management (IAM) Policies
Using Custom Repositories with Cloudera Manager and CDH
Cloudera Manager Health Information
Opening Cloudera Manager
Diagnostic Data Collection
User Management


Using Altus Director Server to Manage Cluster Instances

The Altus Director Configuration File
Submitting a Cluster Configuration File
Exporting a Configuration File
Deploying Clusters in an Existing Environment
Using Spot Instances
Using Automatic Instance Groups
Using Products outside CDH with Altus Director

Custom Service Descriptors
Using Kudu with CDH 5.12 or Earlier
Using Spark 2 with Altus Director
Using Cloudera Data Science Workbench with Altus Director
Using Third-Party Products with Altus Director


Creating and Modifying Clusters with the Altus Director Web UI
Altus Director Scripts
Terminating a Cluster


Using the Altus Director Client

Installing Altus Director Client
Provisioning a Cluster on AWS
Running Altus Director Client


Upgrading Altus Director
Troubleshooting
FAQ
Altus Director Glossary





To read this documentation, you must turn JavaScript on.




Using MariaDB for Altus Director Server

You can set up an external MariaDB database to store Altus Director server data. In a production environment, Cloudera recommends that you set up an external database for the Altus
Director server instead of using the default H2 database.
To use a MariaDB database for Altus Director data, complete the following steps:

Install the MariaDB server.
Configure and start the MariaDB server.
Install the MariaDB JDBC driver.
Create a database for the Altus Director server.
Configure the Altus Director server to use the MariaDB database.




Installing the MariaDB Server

Note:

If you already have a MariaDB database set up, you can skip to Configuring and Starting the
MariaDB Server to verify that your MariaDB configuration meets the requirements for Altus Director.
The datadir directory (/var/lib/mysql by default) must be located on a partition that has sufficient free space.



Install the MariaDB database.
$ sudo yum install mariadb-server
After issuing the command, you might need to confirm that you want to complete the installation.





Configuring and Starting the MariaDB Server

MariaDB has the same database structure and indexes as MySQL. You can replace MySQL with MariaDB files in the same MySQL file directory structure.

Stop the MariaDB server if it is running.

For RHEL 6:
$ sudo service mariadb stop
For RHEL 7:
$ sudo systemctl stop mariadb


Move old InnoDB log files /var/lib/mysql/ib_logfile0 and /var/lib/mysql/ib_logfile1 from /var/lib/mysql/ to a backup location.
Determine the location of the option file, my.cnf, and update it as follows::

To prevent deadlocks, set the isolation level to read committed.
Configure MariaDB to use the InnoDB engine, rather than MyISAM. (The default storage engine for MariaDB is MyISAM.) To check which engine your tables are using, run the following command from the MariaDB shell:
mysql> show table status;
To configure MariaDB to use the InnoDB storage engine, add the following line to the [mysqld] section of the my.cnf option file:
[mysqld]
default-storage-engine = innodb
Binary logging is not a requirement for Altus Director installations. Binary logging provides benefits such as MariaDB replication or point-in-time incremental recovery after database
restore. Examples of this configuration follow. For more information, see The Binary Log.

Following is a typical option file:
[mysqld]
default-storage-engine = innodb
transaction-isolation = READ-COMMITTED
# Disabling symbolic-links is recommended to prevent assorted security risks;
# to do so, uncomment this line:
# symbolic-links = 0

key_buffer_size = 32M
max_allowed_packet = 32M
thread_stack = 256K
thread_cache_size = 64
query_cache_limit = 8M
query_cache_size = 64M
query_cache_type = 1

max_connections = 550

#log_bin should be on a disk with enough free space. Replace '/var/lib/mysql/mysql_binary_log' with an appropriate path for your system.
#log_bin=/var/lib/mysql/mysql_binary_log
#expire_logs_days = 10
#max_binlog_size = 100M

# For MySQL version 5.1.8 or later. Comment out binlog_format for older versions.
binlog_format = mixed

read_buffer_size = 2M
read_rnd_buffer_size = 16M
sort_buffer_size = 8M
join_buffer_size = 8M

# InnoDB settings
innodb_file_per_table = 1
innodb_flush_log_at_trx_commit  = 2
innodb_log_buffer_size = 64M
innodb_buffer_pool_size = 4G
innodb_thread_concurrency = 8
innodb_flush_method = O_DIRECT
innodb_log_file_size = 512M

[mysqld_safe]
log-error=/var/log/mysqld.log
pid-file=/var/run/mysqld/mysqld.pid
If AppArmor is running on the host where MariaDB is installed, you might need to configure AppArmor to allow MariaDB to write to the binary.
Ensure the MariaDB server starts at boot.

For RHEL 6:
$ sudo chkconfig mysqld on
For RHEL 7:
$ sudo systemctl enable mariadb


Start the MariaDB server:

For RHEL 6:
$ sudo service mysqld start
For RHEL 7:
$ sudo systemctl start mariadb


Set the MariaDB root password. In the following example, the current root password is blank. Press the Enter key when
you're prompted for the root password.
$ sudo /usr/bin/mysql_secure_installation
[...]
Enter current password for root (enter for none):
OK, successfully used password, moving on...
[...]
Set root password? [Y/n] y
New password:
Re-enter new password:
Remove anonymous users? [Y/n] Y
[...]
Disallow root login remotely? [Y/n] N
[...]
Remove test database and access to it [Y/n] Y
[...]
Reload privilege tables now? [Y/n] Y
All done!




Installing the MariaDB JDBC Driver

Install the MariaDB JDBC driver for the Linux distribution you are using.
Note: The JDBC driver described here to use for MariaDB is the MySQL driver, which works with MariaDB, as well.


Download the MySQL JDBC driver from http://www.mysql.com/downloads/connector/j/5.1.html.
Extract the JDBC driver JAR file from the downloaded file. For example:
tar zxvf mysql-connector-java-5.1.31.tar.gz
Copy the JDBC driver, renamed, to the relevant host. For example:
$ sudo cp mysql-connector-java-5.1.31/mysql-connector-java-5.1.31-bin.jar /usr/share/java/mysql-connector-java.jar
If the target directory does not yet exist on this host, you can create it before copying the JAR file. For example:
$ sudo mkdir -p /usr/share/java/
$ sudo cp mysql-connector-java-5.1.31/mysql-connector-java-5.1.31-bin.jar /usr/share/java/mysql-connector-java.jar

Note: Do not use the yum install command to install the MySQL driver package, because it installs openJDK, and then
uses the Linux alternatives command to set the system JDK to be openJDK.



Creating a Database for Altus Director Server


You can create the database on the host where the Altus Director server will run, or on another host that is accessible by the Altus Director server. The database must be configured to
support UTF-8 character set encoding.
Record the values you enter for database names, usernames, and passwords. Altus Director requires this information to connect to the database.



Log into MariaDB as the root user:
$ mysql -u root -p
Enter password:
Create a database for Altus Director server:
mysql> create database database DEFAULT CHARACTER SET utf8;
Query OK, 1 row affected (0.00 sec)

mysql > grant all on database.* TO 'user'@'%' IDENTIFIED BY 'password';
Query OK, 0 rows affected (0.00 sec)
database, user, and password can be any value. The examples match the names you provide in the
Altus Director configuration settings described below in Configuring Altus Director Server to use
the MariaDB Database.




Backing Up MariaDB Databases

To back up the MariaDB database, run the mysqldump command on the MariaDB host, as follows:
$ mysqldump -hhostname -uusername -ppassword database > /tmp/database-backup.sql




Configuring Altus Director Server to use the MariaDB Database

Before starting the Altus Director server, edit the "Configurations for database connectivity" section of /etc/cloudera-director-server/application.properties.
Note: If the Altus Director server is already running, it must be restarted after configuring MariaDB access. The server will not load
configuration updates while running.
.
#
# Configurations for database connectivity.
#

# Optional database type (h2 or mysql) (defaults to h2)
#lp.database.type: mysql

# Optional database username (defaults to "director")
#lp.database.username:

# Optional database password (defaults to "password")
#lp.database.password:

# Optional database host (defaults to "localhost")
#lp.database.host:

# Optional database port (defaults to 3306)
#lp.database.port:

# Optional database (schema) name (defaults to "director")
#lp.database.name:



Categories: Altus Director | Configuring | Databases | JDBC | MariaDB | All Categories



Using MySQL for Altus Director Server


Altus Director Database Encryption


















About Cloudera
Resources
Contact
Careers
Press
Documentation

United States: +1 888 789 1488
Outside the US: +1 650 362 0488



Â© 2019 Cloudera, Inc. All rights reserved. Apache Hadoop and associated open source project names are trademarks of the Apache Software Foundation. For a complete list of trademarks, click here.
If this documentation includes code, including but not limited to, code examples, Cloudera makes this available to you under the terms of the Apache License, Version 2.0, including any required
notices. A copy of the Apache License Version 2.0 can be found here.










Terms & ConditionsÂ  | Â Privacy Policy

Page generated JulyÂ 28,Â 2019.












