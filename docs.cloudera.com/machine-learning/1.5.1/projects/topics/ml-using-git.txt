Git for CollaborationCloudera Docs
Git for Collaboration
Cloudera Machine Learning provides seamless access to Git
    projects. Whether you are working independently, or as part of a team, you
    can leverage all of benefits of version control and collaboration with Git
    from within Cloudera Machine Learning.
 Teams that already use Git for collaboration can
      continue to do so. Each team member will need to create a separate
      Cloudera Machine Learning project from the central Git repository.
      For anything but simple projects, Cloudera recommends using Git for
      version control. You should work on Cloudera Machine Learning the
      same way you would work locally, and for most data scientists and
      developers that means using Git. 
Cloudera Machine Learning does not include
      significant UI support for Git, but instead allows you to use the full
      power of the command line. If you launch a session and open a Terminal,
      you can run any Git command, including init, add, commit, branch, merge and rebase. Everything
      should work exactly as it does locally.
When you create a project, you can optionally supply
      an HTTPS or SSH Git URL that points to a remote repository. The new
      project is a clone of that remote repository. You can commit, push and
      pull your code by running a console and opening a Terminal. Note that if
      you want to use SSH to clone the repo, you will need to first add your
      personal Cloudera Machine Learning SSH key to your GitHub account. For
      instructions, see Adding SSH Key to GitHub. 
If you see Git commands hanging indefinitely, check
      with your cluster administrators to make sure that the SSH ports on the
      Cloudera Machine Learning hosts are not blocked.

Related informationAdding an SSH Key to GitHubCreating a ProjectLinking an Existing Project to a Git RemoteIf you did not create your project from a Git repository, you can     link an existing project to a Git remote (for example,       git@github.com:username/repo.git) so that you can push     and pull your code.