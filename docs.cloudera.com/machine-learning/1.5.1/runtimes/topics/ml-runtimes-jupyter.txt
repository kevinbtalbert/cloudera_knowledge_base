Using JupyterLab with ML RuntimesCloudera Docs
Using JupyterLab with ML Runtimes
JupyterLab is a web-based interactive development environment for Jupyter notebooks,
      code, and data. 
You can use JupyterLab to configure and arrange the user interface to support a wide range of
         workflows in data science, scientific computing, and machine learning. JupyterLab allows
         you to use extensions that add new components and integrate with existing ones.
You must install any files necessary for JupyterLab, including configuration,
         customization, extensions, and kernels, into /home/cdsw for each project. 
Code Completion in JupyterLab
You can use JupyterLab to write and run code in notebooks or in a traditional
            .py file. Completion works out of the box in notebooks and consoles. If
         you are working in a .py file in the text editor, you must create a
         console to provide the completion suggestions. To do this:

Open the .py file.
Right click on the document and choose "Create console for editor".
Choose the option appropriate to the type of completion you want to perform.For
               example, to get completions on "math", you must first "import math" in the
               console.

Set JupyterLab Timeouts
You can control JupyterLab timeouts with the following environment variables:
JUPYTER_KERNEL_TIMEOUT_SECONDS
JUPYTER_SERVER_TIMEOUT_SECONDS

Installing a Jupyter extensionExtensions modify the appearance or behaviour of Jupyter applications (including     JupyterLab and Jupyter Notebook). Installing a Jupyter kernelJupyter kernels are “connections” through which a notebook (or other part of     JupyterLab) can talk to a particular interpreter. CDSW includes one kernel in each JupyterLab     Runtime: Python 3.6, Python 3.7, or Python 3.8. Using Conda Runtime Users now can create their own Python or R Conda environments within their CML     Projects that they can use in the JupyterLab editor.Parent topic: Using Editors for ML Runtimes