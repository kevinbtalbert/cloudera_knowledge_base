IFrame VisualizationsCloudera Docs
IFrame Visualizations
Most visualizations require more than basic HTML. Embedding HTML directly in your
    console also risks conflicts between different parts of your code. The most flexible way to
    embed a web resource is using an IFrame.
note
Cloudera Machine Learning versions 1.4.2 (and higher) added a new feature that allowed
          users to 
          HTTP security headers for responses to Cloudera
          Machine Learning. This setting is enabled by default. However, the X-Frame-Options header
          added as part of this feature blocks rendering of iFrames injected by third-party data
          visualization libraries. 
To work around this issue, a site administrator can go to the Admin > Security page and disable the Enable HTTP security headers property. Restart
          Cloudera Machine Learning for this change to take effect.

R
library("cdsw")
iframe(src="https://www.youtube.com/embed/8pHzROP1D-w", width="854px", height="510px")
Python
from IPython.display import HTML
HTML('<iframe width="854" height="510" src="https://www.youtube.com/embed/8pHzROP1D-w"></iframe>')You can generate HTML files
        within your console and display them in IFrames using the /cdn folder.
        The cdn folder persists and services static assets generated by your
        engine runs. For instance, you can embed a full HTML file with IFrames.
R
library("cdsw") 
f <- file("/cdn/index.html") 
html.content <- paste("<p>Here is a normal random variate:", rnorm(1), "</p>") 
writeLines(c(html.content), f) 
close(f) 
iframe("index.html")
Python
from IPython.display import HTML
import random

html_content  = "<p>Here is a normal random variate: %f </p>" % random.normalvariate(0,1)

file("/cdn/index.html", "w").write(html_content)
HTML("<iframe src=index.html>")Cloudera Machine Learning
        uses this feature to support many rich plotting libraries such as htmlwidgets, Bokeh, and
        Plotly.

Parent topic: Built-in CML Visualizations