Predicate push-down optimizationCloudera Docs
Predicate push-down optimization

The columnar nature of the ORC format helps avoid reading unnecessary
      columns, but it is still possible to read unnecessary rows. The example in
      this subsection reads all rows in which the age value is between 0 and
      100, even though the query requested rows in which the age value is less
      than 15 ("...WHERE age < 15"). Such full table
      scanning is an expensive operation.
ORC avoids this type of overhead by using predicate push-down, with three
      levels of built-in indexes within each file: file level, stripe
        level, and row level:


File-level and stripe-level statistics are in the file footer, making
          it easy to determine if the rest of the file must be read.


Row-level indexes include column statistics for each row group and
          position, for finding the start of the row group.


ORC uses these indexes to move the filter operation to the data loading
      phase by reading only data that potentially includes required rows.
This combination of predicate push-down with columnar storage reduces
      disk I/O significantly, especially for larger datasets in which I/O
      bandwidth becomes the main bottleneck to performance.
ORC predicate push-down is enabled by default in Spark SQL. 

Parent topic: Accessing ORC Data in Hive Tables