Performance ConsiderationsCloudera Docs
Performance Considerations
The following sections explain the factors affecting the performance
    of Impala features, and procedures for tuning, monitoring, and benchmarking
    Impala queries and other SQL operations.
Performance Best PracticesUse the performance guidelines and best practices during planning,     experimentation, and performance tuning for an Impala-enabled     cluster.Query Join PerformanceJoins are the main class of queries that you can tune at the SQL     level. Runtime FilteringRuntime filtering is a wide-ranging optimization     feature available in Impala. When only a fraction of the data in a table is     needed for a query against a partitioned table or to evaluate a join     condition, Impala determines the appropriate conditions while the query is     running, and broadcasts that information to all the       impalad nodes that are reading the table so that they     can avoid unnecessary I/O to read partition data, and avoid unnecessary     network transmission by sending only the subset of rows that match the join     keys across the network.Min/Max FilteringIn addition to filtering at the partition level, the Parquet file format supports   filtering at three levels: row group, page and row levels based on the minimum and maximum values   of row group or page, and the value of the row in the file. These minimum/maximum column values   are stored in the footer of the file. If the range between the minimum and maximum value in the   file does not overlap with the range of data specified by the query, then the system skips the row   group, page or row during scans.Support reading and writing Parquet bloom filtersBloom filter is a performance optimization feature now available in Impala. This filter   tells you, rapidly and memory-efficiently, whether the data you are looking for is present in a   file. HDFS Caching Impala can use the HDFS caching feature to make more effective use     of RAM so that repeated queries can take advantage of data pinned in     memory regardless of how much data is processed overall.HDFS Block SkewFor best performance of Impala parallel queries, the work is     divided equally across hosts in the cluster, and all hosts take     approximately equal time to finish their work. If one host takes     substantially longer than others, the extra time needed for the slow host     can become the dominant factor in query performance. Therefore, one of the     first steps in performance tuning for Impala is to detect and correct such     conditions. Understanding Performance using EXPLAIN PlanTo understand the high-level performance considerations for Impala     queries, read the output of the EXPLAIN statement for the     query. You can get the EXPLAIN plan without actually     running the query itself.Understanding Performance using SUMMARY ReportFor an overview of the physical performance characteristics for a     query, issue the SUMMARY command in       impala-shell immediately after executing a query. This     condensed information shows which phases of execution took the most time,     and how the estimates for memory usage and number of rows at each phase     compare to the actual values. Understanding Performance using Query Profile To understand the detailed performance characteristics for a     query, issue the PROFILE command in       impala-shell immediately after executing a query. This     low-level information includes physical details about memory, CPU, I/O, and     network usage, and thus is only available after the query is actually run. 