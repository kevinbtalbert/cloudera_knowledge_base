JBOD Disk migrationCloudera Docs
JBOD Disk migration
Learn how to migrate existing Kafka partitions to JBOD configured disks.

 Migrating data from one disk to another is achieved with the
          kafka-reassign-partitions tool. The following instructions focus on
        migrating existing Kafka partitions to JBOD configured disks.noteCloudera
          recommends that you minimize the volume of replica changes per command instance. Instead
          of moving 10 replicas with a single command, move two at a time in order to save cluster
          resources.



Set up JBOD in your Kafka environment. For more information, see JBOD Setup.
Collect the log directory paths on the JBOD disks where you want to migrate existing
          data. 
Collect the broker IDs of the brokers you want to migrate data to.
Collect the name of the topics you want to migrate partitions from.

noteOutput examples in these instructions are cleaned and formatted to make them easily
        readable.

Create a topics-to-move JSON file that specifies the topics you want to reassign.
          Use the following format: Use the following format:
          {"topics":  [{"topic": "mytopic1"},
             {"topic": "mytopic2"}],
 "version":1
}
Generate the content for the reassignment configuration JSON with the following
          command:
kafka-reassign-partitions --zookeeper hostname:port --topics-to-move-json-file topics to move.json --broker-list broker 1, broker 2 --generate

Running the command lists the distribution of partition replicas on your current
            brokers followed by a proposed partition reassignment configuration. 
Example output:
Current partition replica assignment
{"version":1,
 "partitions":
   [{"topic":"mytopic2","partition":1,"replicas":[2,3],"log_dirs":["any","any"]},
    {"topic":"mytopic1","partition":0,"replicas":[1,2],"log_dirs":["any","any"]},
    {"topic":"mytopic2","partition":0,"replicas":[1,2],"log_dirs":["any","any"]},
    {"topic":"mytopic1","partition":2,"replicas":[3,1],"log_dirs":["any","any"]},
    {"topic":"mytopic1","partition":1,"replicas":[2,3],"log_dirs":["any","any"]}]
}

Proposed partition reassignment configuration

{"version":1,
 "partitions":
   [{"topic":"mytopic1","partition":0,"replicas":[4,5],"log_dirs":["any","any"]},
    {"topic":"mytopic1","partition":2,"replicas":[4,5],"log_dirs":["any","any"]},
    {"topic":"mytopic2","partition":1,"replicas":[4,5],"log_dirs":["any","any"]},
    {"topic":"mytopic1","partition":1,"replicas":[5,4],"log_dirs":["any","any"]},
    {"topic":"mytopic2","partition":0,"replicas":[5,4],"log_dirs":["any","any"]}]
}
In this example, the tool proposed a configuration which reassigns existing partitions
            on broker 1, 2, and 3 to brokers 4 and 5. 
Copy and paste the proposed partition reassignment configuration into an empty JSON
          file.Modify the suggested reassignment configuration.
When migrating data you have two choices. You can move partitions to a different log
            directory on the same broker, or move it to a different log directory on another broker. 



To reassign partitions between log directories on the same broker, change the
                  appropriate any entry to an absolute path. For example:
                  {"topic":"mytopic1","partition":0,"replicas":[4,5],"log_dirs":["/JBOD-disk/directory1","any"]}
 To reassign partitions between log directories across different brokers, change
                  the broker ID specified in replicas and the appropriate
                    any entry to an absolute path. For
                  example:{"topic":"mytopic1","partition":0,"replicas":[6,5],"log_dirs":["/JBOD-disk/directory1","any"]}



Save the file.Start the redistribution process with the following command:
            kafka-reassign-partitions --zookeeper hostname:port  --reassignment-json-file reassignment configuration.json --bootstrap-server hostname:port --executeimportant The bootstrap server has to be specified with the
              --bootstrap-server option if an absolute log directory path is
            specified for a replica in the reassignment configuration JSON file.The tool
          prints a list containing the original replica assignment and a message that reassignment
          has started. Example
          output:Current partition replica assignment

{"version":1,
 "partitions":
   [{"topic":"mytopic2","partition":1,"replicas":[2,3],"log_dirs":["any","any"]},
    {"topic":"mytopic1","partition":0,"replicas":[1,2],"log_dirs":["any","any"]},
    {"topic":"mytopic2","partition":0,"replicas":[1,2],"log_dirs":["any","any"]},
    {"topic":"mytopic1","partition":2,"replicas":[3,1],"log_dirs":["any","any"]},
    {"topic":"mytopic1","partition":1,"replicas":[2,3],"log_dirs":["any","any"]}]
}

Save this to use as the --reassignment-json-file option during rollback
Successfully started reassignment of partitions.Verify the status of the reassignment with the following command:
          kafka-reassign-partitions --zookeeper hostname:port --reassignment-json-file reassignment configuration.json  --bootstrap-server hostname:port --verifyThe
          tool prints the reassignment status of all partitions. Example output:
          Status of partition reassignment: 
Reassignment of partition mytopic2-1 completed successfully
Reassignment of partition mytopic1-0 completed successfully
Reassignment of partition mytopic2-0 completed successfully
Reassignment of partition mytopic1-2 completed successfully
Reassignment of partition mytopic1-1 completed successfully
Existing Kafka partitions are migrated to JBOD configured disks.

Related informationJBOD setupkafka-reassign-partitionsParent topic: JBOD