Stateless NiFi Source and SinkCloudera Docs
Stateless NiFi Source and Sink
The Stateless NiFi Source and Sink connectors allow you to run NiFi dataflows within
    Kafka Connect. Using these connectors can grant you access to a number of NiFi features without
    having the need to deploy or maintain NiFi on your cluster.
Apache NiFi is a powerful tool for authoring and running dataflows. It provides many
      capabilities that are necessary for large-scale enterprise deployments, such as data
      persistence and resilience, data lineage and traceability, as well as multi-tenancy. This,
      however, requires an administrator who ensures that this process is running and operational.
      Additionally, in most cases, adding more capabilities to your deployments results in more
      complexity.
There are times, however, when users do not need all the power of NiFi, and running it in a
      much simpler form factor is sufficient. A common use case is to use NiFi to pull data from
      many different sources, perform manipulations (for example, convert JSON to Avro), filter some
      records, and then publish the data to Apache Kafka. Another common use case is to pull data
      from Apache Kafka, perform manipulations and filtering, and then publish the data
      elsewhere.
For deployments where NiFi acts only as a bridge into and out of Kafka, it can be simpler to
      operationalize such a deployment by running the dataflow within Kafka Connect. The Stateless
      NiFi Source and Sink connectors allow users to do just that.
Stateless NiFi
Dataflows  within Kafka Connect  run using the Stateless NiFi dataflow engine.
        Stateless NiFi differs from the traditional NiFi engine in the following ways:

Stateless NiFi is an engine that is designed to be embedded. This makes it convenient to
          run it within the Kafka Connect framework.
Stateless NiFi does not provide a user interface (UI) or a REST API. Additionally, it
          does not support modifying the dataflow while it is running.
Stateless NiFi does not persist FlowFile content to disk. Instead, it holds the content
          in memory.
Stateless NiFi does not use data prioritizers. Instead, it operates on data in a
          First-In-First-Out order. Dataflows built for Stateless NiFi must have a single source and
          a single destination. The only exception to this is when the data is routed to exactly one
          of multiple destinations, such as a Failure destination or a Success destination.
Stateless NiFi does not currently provide access to data lineage/provenance.
Stateless NiFi does not support cyclic graphs. While it is common and desirable in
          traditional NiFi to have a failure relationship from a Processor route back to the same
          Processor, this can result in a StackOverflowException in Stateless NiFi. The preferred
          approach in Stateless NiFi is to create an Output Port for failures and route the data to
          that Output Port.



Dataflow development best practices for Stateless NiFiBy leveraging Stateless NiFi, you can build your own dataflows and use those as Kafka     Connect connectors. However, there are some principles to keep in mind when building such a     dataflow in NiFi.Developing a dataflow for Stateless NiFiLearn about the recommended process of building a dataflow that you can deploy with     the Stateless NiFi Sink or Source connectors. This process involves building and designing a     parameterized dataflow within a Process Group and then downloading the dataflow as a flow     definition.Deploying a dataflow using Stateless NiFiA custom developed NiFi dataflow can be deployed with the Stateless NiFi Source or Sink     connectors using Streams Messaging Manager (SMM).Configuring flow.snapshot for Stateless NiFi connectorsLearn about the options you have in Streams Messaging Manager (SMM) when configuring the     flow.snapshot Stateless NiFi connector property as well as the Save and Enhance feature that can     be used to automatically import NiFi parameters into the connector configuration. Parent topic: Connectors