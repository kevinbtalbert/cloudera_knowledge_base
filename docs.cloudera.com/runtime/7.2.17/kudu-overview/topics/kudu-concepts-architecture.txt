Kudu conceptsCloudera Docs
Kudu concepts
In order to use Kudu efficiently, you have to familiarize yourself with some basic
      concepts related to Kudu.
Columnar datastore
Kudu is a columnar datastore. A columnar datastore stores data in strongly-typed
            columns. With a proper design, a columnar store can be superior for analytical or data
            warehousing workloads for the following reasons:   


Read efficiency
For analytical queries, you can read a single column, or a
                     portion of that column, while ignoring other columns. This means you can
                     fulfill your request while reading a minimal number of blocks on disk. With a
                     row-based store, you need to read the entire row, even if you only return
                     values from a few columns.
Data compression
Because a given column contains only one type of data,
                     pattern-based compression can be orders of magnitude more efficient than
                     compressing mixed data types, which are used in row-based solutions. Combined
                     with the efficiencies of reading data from columns, compression allows you to
                     fulfill your query while reading even fewer blocks from disk.



Raft consensus algorithm
The Raft consensus algorithm provides a way to elect a leader for a distributed
            cluster from a pool of potential leaders. If a follower cannot reach the current leader,
            it transitions itself to become a candidate. Given a quorum of voters, one
            candidate is elected to be the new leader, and the others transition back to being
            followers.
A full discussion of Raft is out of scope for this documentation, but
            it is a robust algorithm.
 Kudu uses the Raft consensus algorithm for the election of masters
            and leader tablets, as well as determining the success or failure of a given write
            operation. 

Table
A tablet is where your data is stored in Kudu. A table has a schema and a totally
            ordered primary key. A table is split into segments called tablets, by primary key. 

Tablet
A tablet is a contiguous segment of a table, similar to a partition in
            other data storage engines or relational databases. A given tablet is replicated on
            multiple tablet servers, and at any given point in time, one of these replicas is
            considered the leader tablet. Any replica can service reads. Writes require consensus
            among the set of tablet servers serving the tablet. 

Tablet server
A tablet server stores and serves tablets to clients. For a given tablet, one
            tablet server acts as a leader and the others serve follower replicas of that tablet.
            Only leaders service write requests, while leaders or followers each service read
            requests. Leaders are elected using Raft consensus. One tablet server can serve multiple
            tablets, and one tablet can be served by multiple tablet servers. 

Master
The master keeps track of all the tablets, tablet servers, the catalog table, and
            other metadata related to the cluster. At a given point in time, there can only be one
            acting master (the leader). If the current leader disappears, a new master is elected
            using Raft consensus.
 The master also coordinates metadata operations for clients. For
            example, when creating a new table, the client internally sends the request to the
            master. The master writes the metadata for the new table into the catalog table, and
            coordinates the process of creating tablets on the tablet servers. 
 All the master's data is stored in a tablet, which can be replicated
            to all the other candidate masters. 
 Tablet servers heartbeat to the master at a set interval (the
            default is once per second). 

Catalog table
The catalog table is the central location for metadata of Kudu. It stores
            information about tables and tablets. The catalog table is accessible to clients through
            the master, using the client API. The catalog table cannot be read or written directly.
            Instead, it is accessible only through metadata operations exposed in the client
            API.
 The catalog table stores two categories of metadata: 
Table 1. Contents of the catalog table

Content
Description




Tables

 Table schemas, locations, and states 



Tablets

 The list of existing tablets, which tablet
                        servers have replicas of each tablet, the tablet's current state, and start
                        and end keys. 



Logical replications
Kudu replicates operations, not on-disk data. This is referred to as logical
            replication, as opposed to physical replication.
Logical replication has several advantages:

 Although inserts and updates transmit data over the network,
               deletes do not need to move any data. The delete operation is sent to each tablet
               server, which performs the delete locally. 
 Physical operations, such as compaction, do not need to
               transmit the data over the network in Kudu. This is different from storage systems
               that use HDFS, where the blocks need to be transmitted over the network to fulfill
               the required number of replicas. 
 Tablets do not need to perform compactions at the same time or
               on the same schedule. They do not even need to remain in sync on the physical storage
               layer. This decreases the chances of all tablet servers experiencing high latency at
               the same time, due to compactions or heavy write loads. 



Related informationRaft consensus algorithm