Kudu schema designCloudera Docs
Kudu schema design
Kudu tables have a structured data model similar to tables in a traditional relational
      database. With Kudu, schema design is critical for achieving the best performance and
      operational stability. Every workload is unique, and there is no single schema design that is
      best for every table. This topic outlines effective schema design philosophies for Kudu, and
      how they differ from approaches used for traditional relational database schemas.
There are
         three main concerns when creating Kudu tables: column design, primary key design, and
         partitioning.

The perfect schemaThe perfect schema would accomplish the following: Column designA Kudu table consists of one or more columns, each with a defined type. Columns that     are not part of the primary key may be nullable. Primary key designEvery Kudu table must declare a primary key comprised of one or more columns. Like an     RDBMS primary key, the Kudu primary key enforces a uniqueness constraint. Attempting to insert a     row with the same primary key values as an existing row results in a duplicate key     error.PartitioningIn order to provide scalability, Kudu tables are partitioned into units called     tablets, and distributed across many tablet servers. A row always belongs to a single tablet.     The method of assigning rows to tablets is determined by the partitioning of the table, which is     set during table creation.Schema alterationsThis topic lists the ways in which you can alter a tableâ€™s schema.Schema design limitationsKudu currently has some known limitations that may factor into schema     design.Partitioning limitationsHere are some of the limitations that you must consider before partitionoing       tables.