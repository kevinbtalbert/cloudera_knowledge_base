Lily HBase batch indexing for Cloudera SearchCloudera Docs
Lily HBase batch indexing for Cloudera Search
You can batch index HBase tables using the Lily HBase batch indexer MapReduce job
      (HBaseMapReduceIndexerTool). This batch indexing does not require HBase replication or the
      Lily HBase Indexer Service. Subsequently you do not need to register a Lily HBase Indexer
      configuration with the Lily HBase Indexer Service.
The indexer supports flexible, custom, application-specific rules to
      extract, transform, and load HBase data into Solr. Solr search results can
      contain columnFamily:qualifier links back to the data
      stored in HBase. This way, applications can use the search result set to
      directly access matching raw HBase cells.
The following procedures demonstrate creating a
      small HBase table and using the HBaseMapReduceIndexerTool to index the
      table into a collection:
importantDo not use the Lily HBase Batch Indexer during a
      rolling upgrade. The indexer requires all replicas be hosted on the same
      HBase version. If an indexing job is running during a rolling upgrade,
      different nodes may be running pre- and post-upgrade versions of
      HBase.

Populating an HBase TableCreate a Collection in Cloudera SearchCreating a Lily HBase Indexer Configuration FileCreating a Morphline Configuration FileUnderstanding the extractHBaseCells Morphline CommandRunning the HBaseMapReduceIndexerToolHBaseMapReduceIndexerTool is a MapReduce batch job driver that takes input data from     an HBase table, creates Solr index shards, and writes the indexes to HDFS in a flexible,     scalable, and fault-tolerant manner. It also supports merging the output shards into a set of     live customer-facing Solr servers in SolrCloud.HBaseMapReduceIndexerTool command line referenceCommand line syntax, examples and list of parameters. Using --go-live with SSL or KerberosEstablish trust between the indexer client and Solr server(s). Understanding --go-live and HDFS ACLsParent topic: MapReduce indexing