What is Cloudera SearchCloudera Docs
What is Cloudera Search
Learn about how Cloudera Search is different from Apache Solr and the added value it
      provides.
Cloudera Search is Apache
        Solr fully integrated in the Cloudera platform, taking advantage
      of the flexible, scalable, and robust storage system and data processing
      frameworks included in Cloudera Data Platform (CDP). This eliminates the
      need to move large data sets across infrastructures to perform business
      tasks. It further enables a streamlined data pipeline, where search and
      text matching is part of a larger workflow.
Cloudera Search provides easy, natural language access to data stored in or ingested into
         Hadoop, HBase, or cloud storage. End users and other web services can use full-text queries
         and faceted drill-down to explore text, semi-structured, and structured data as well as
         quickly filter and aggregate it to gain business insight without requiring SQL or
         programming skills.
Using Cloudera Search with the CDP infrastructure provides:

Simplified infrastructure
Better production visibility and control
Quicker insights across various data types
Quicker problem resolution
Simplified interaction and platform access for more
        users and use cases beyond SQL
Scalability, flexibility, and reliability of search services on the same
        platform used to run other types of workloads on the same data
A unified security model across all processes with access to your
        data
Flexibility and scale in ingest and pre-processing options

The following table describes Cloudera Search features.Table 1. Cloudera Search Features

Feature
Description



Unified management and monitoring with Cloudera Manager
Cloudera Manager provides unified and centralized
                management and monitoring for Cloudera Runtime and Cloudera
                Search. Cloudera Manager simplifies deployment, configuration,
                and monitoring of your search services. Many existing search
                solutions lack management and monitoring capabilities and fail
                to provide deep insight into utilization, system health,
                trending, and other supportability aspects.


Simple cluster and collection management using the
                           solrctl tool
Solrctl is a command line tool that allows convenient, centralized
                        management of:

Solr instance configurations and schemas in ZooKeeper

Solr collection life cycle including low level control (Solr
                              cores)
Collection snapshots, Backup and restore operations 
SolrCloud cluster initialization and configuration



Index storage in HDFS

Cloudera Search is integrated with HDFS for robust, scalable, and
                  self-healing index storage. Indexes created by Solr/Lucene are
                  directly written in HDFS with the data, instead of to local
                  disk, thereby providing fault tolerance and redundancy.
Cloudera Search is optimized for fast read and write of indexes in HDFS while
                  indexes are served and queried through standard Solr
                  mechanisms. Because data and indexes are co-located, data
                  processing does not require transport or separately managed
                  storage.



Batch index creation through MapReduce
To facilitate index creation for large data sets, Cloudera
                Search has built-in MapReduce jobs for indexing data stored in
                HDFS or HBase. As a result, the linear scalability of MapReduce
                is applied to the indexing pipeline, off-loading Solr index
                serving resources.


Easy interaction and data exploration through Hue
A Cloudera Search GUI is provided as a Hue plug-in,
                enabling users to interactively query data, view result files,
                and do faceted exploration. Hue can also schedule standing
                queries and explore index files. This GUI uses the Cloudera
                Search API, which is based on the standard Solr API. The
                drag-and-drop dashboard interface makes it easy for anyone to
                create a Search dashboard.


Simplified data processing for Search workloads
Cloudera Search can use Apache Tika for parsing and preparation of many
                        of the standard file formats for indexing. Additionally, Cloudera Search
                        supports Avro, Hadoop Sequence, and Snappy file format mappings, as well as
                        Log file formats, JSON, XML, and HTML.Cloudera Search also provides
                           Morphlines, an easy-to-use, pre-built library of common data
                           preprocessing functions. Morphlines simplifies data preparation for
                           indexing over a variety of file formats. Users can easily implement
                           Morphlines for Kafka, and HBase, or re-use the same Morphlines for other
                           applications, such as MapReduce or Spark jobs.



HBase search
Cloudera Search integrates with HBase, enabling full-text
                search of HBase data without affecting HBase performance or
                duplicating data storage. A listener monitors the replication
                event stream from HBase RegionServers and captures each write or
                update-replicated event, enabling extraction and mapping (for
                example, using Morphlines). The event is then sent directly to
                Solr for indexing and storage in HDFS, using the same process as
                for other indexing workloads of Cloudera Search. The indexes can
                be served immediately, enabling free-text searching of HBase
                data.


Spark-Solr connector
You can use the Spark-Solr connector to index data into Solr in multiple
                        ways, both batch and streaming. With the connector you get the benefits of
                        Spark while you can access Solr easily and in a familiar way, from both
                        Scala and Java.




