Apache Hive 3 tablesCloudera Docs
Apache Hive 3 tables
Table type definitions and a diagram of the relationship of table types to ACID
    properties clarifies Hive tables. The location of a table depends on the table type. You might
    choose a table type based on its supported storage format.
You can create ACID (atomic, consistent, isolated, and durable) tables for unlimited
      transactions or for insert-only transactions. These tables are Hive managed tables.
      Alternatively, you can create an external table for non-transactional use. Because Hive control
      of the external table is weak, the table is not ACID compliant.
The following diagram depicts the Hive table types.


The following matrix includes the types of tables you can create using Hive, whether or not
      ACID properties are supported, required storage format, and key SQL operations. 


Table Type
ACID
File Format
INSERT
UPDATE/DELETE



Managed: CRUD transactional
Yes
ORC
Yes
Yes


Managed: Insert-only transactional
Yes
Any
Yes
No


Managed: Temporary 
No
Any
Yes
No


External
No
Any
Yes
No


Although you cannot use the SQL UPDATE or DELETE statements to delete data in some types of
      tables, you can use DROP PARTITION on any table type to delete the data. 
Table storage formats
The data in CRUD tables must be in ORC format. Implementing a storage handler that
        supports AcidInputFormat and AcidOutputFormat is equivalent to specifying ORC storage. 
Insert-only tables support all file formats. 
The managed table storage type is Optimized Row Column (ORC) by default. If you accept the
        default by not specifying any storage during table creation, or if you specify ORC storage,
        you get an ACID table with insert, update, and delete (CRUD) capabilities. If you specify
        any other storage type, such as text, CSV, AVRO, or JSON, you get an insert-only ACID table.
        You cannot update or delete columns in the insert-only table.

Transactional tables
Transactional tables are ACID tables that reside in the Hive warehouse. To achieve ACID
        compliance, Hive has to manage the table, including access to the table data. Only through
        Hive can you access and change the data in managed tables. Because Hive has full control of
        managed tables, Hive can optimize these tables extensively. 
Hive is designed to support a relatively low rate of transactions, as opposed to serving as
        an online analytical processing (OLAP) system. You can use the SHOW TRANSACTIONS command to
        list open and aborted transactions.
Transactional tables in Hive 3 are on a par with non-ACID tables. No bucketing or sorting
        is required in Hive 3 transactional tables. Bucketing does not affect performance. These
        tables are compatible with native cloud storage.
Hive supports one statement per transaction, which can include any number of rows,
        partitions, or tables.

External tables
External table data is not owned or controlled by Hive. You typically use an external table
        when you want to access data directly at the file level, using a tool other than Hive.
          You can also use a storage handler, such as Druid or HBase, to create a table that
          resides outside the Hive metastore.

Hive 3 does not support the following capabilities for external tables: 

Query cache
Materialized views, except in a limited way
Automatic runtime filtering
File merging after insert

When you run DROP TABLE on an external table, by default Hive drops only the metadata
        (schema). If you want the DROP TABLE command to also remove the actual data in the external
        table, as DROP TABLE does on a managed table, you need to set the
        external.table.purge property to true as described later. 


Hive table locationsYou need a little information about the location of your Hive tables in CDP Public   Cloud, which you can control. The location depends on the table type that you can determine by   running a Hive query. Refer to a table using dot notationHive 3.1 changes to table references using dot notation might require changes to your         Hive scripts.Understanding CREATE TABLE behaviorHive table creation has changed significantly since Hive 3 to improve useability and   functionality. You must understand the default behavior of the CREATE    TABLE statement in CDP Public Cloud.Creating a CRUD transactional tableYou create a CRUD transactional table having ACID (atomic, consistent, isolated, and         durable) properties when you need a managed table that you can update, delete, and merge.         You learn by example how to determine the table type. Creating an insert-only transactional tableYou can create a transactional table using any storage format if you do not require         update and delete capability. This type of table has ACID properties, is a managed table,         and accepts insert operations only. The storage format of an insert-only table is not         restricted to ORC. Creating an S3-based external tableYou use the LOCATION clause in the CREATE EXTERNAL TABLE statement to create an         external data having source data on S3.         Dropping an external table along with dataWhen you run DROP TABLE on an external table, by default Hive drops only the metadata         (schema). If you want the DROP TABLE command to also remove the actual data in the external         table, as DROP TABLE does on a managed table, you need to configure the table properties         accordingly.Converting a managed non-transactional table to externalYou can easily convert a managed table, if it is not an ACID (transactional) table,         to external using the ALTER TABLE statement. You might have a non-ACID, managed table after         an upgrade from Hive 1 or 2.Accessing StorageHandler and other external tables Before creating secure external tables based on a StorageHandler, you must configure         Hive impersonation. You learn which permissions Hive checks before you attempt to create a         secure external table. You understand the policies necessary for accessing HBase from         Hive.Using constraintsYou can use SQL constraints to enforce data integrity and improve performance. Using   constraints, the optimizer can simplify queries. Constraints can make data predictable and easy to   locate. Using constraints and supported modifiers, you can follow examples to constrain queries to   unique or not null values, for example.Determining the table typeYou can determine the type of a Hive table, whether it has ACID properties, the         storage format, such as ORC, and other information. Knowing the table type is important for         a number of reasons, such as understanding how to store data in the table or to completely         remove data from the cluster.